ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.delay,"ax",%progbits
  19              		.align	1
  20              		.global	delay
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	delay:
  26              	.LVL0:
  27              	.LFB48:
  28              		.file 2 "Core/Inc/lcd_stm32f0.c"
   1:Core/Inc/lcd_stm32f0.c **** //********************************************************************
   2:Core/Inc/lcd_stm32f0.c **** //*                      EEE2046F STM32F0                            *
   3:Core/Inc/lcd_stm32f0.c **** //*                         LCD MODULE                               *
   4:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
   5:Core/Inc/lcd_stm32f0.c **** //* WRITTEN BY:    Copyright (C) Samuel Ginsberg 2004                *
   6:Core/Inc/lcd_stm32f0.c **** //* PORTED TO STM32F0 dev board by James Gowans, 2014                *
   7:Core/Inc/lcd_stm32f0.c **** //* MODIFIED BY:   Robyn Verrinder                                   *
   8:Core/Inc/lcd_stm32f0.c **** //* DATE CREATED:  2004                                              *
   9:Core/Inc/lcd_stm32f0.c **** //* PORTED:	   2014						     *
  10:Core/Inc/lcd_stm32f0.c **** //* MODIFIED:      03-08-2015                                        *
  11:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  12:Core/Inc/lcd_stm32f0.c **** //* PROGRAMMED IN: ECLIPSE IDE Luna Service Release 1 (4.4.1)        *
  13:Core/Inc/lcd_stm32f0.c **** //* DEV. BOARD:    UCT STM32 Development Board                       *
  14:Core/Inc/lcd_stm32f0.c **** //* TARGET:	   STMicroelectronics STM32F051C6                    *
  15:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  16:Core/Inc/lcd_stm32f0.c **** //* DESCRIPTION:   This code contains common functions to communicate*
  17:Core/Inc/lcd_stm32f0.c **** //*                with the LCD module connected to the STM32 uC.    *
  18:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  19:Core/Inc/lcd_stm32f0.c **** //* LCD SETUP:     - 4 bit mode      (Upper 4 data lines D4-D7 used) *
  20:Core/Inc/lcd_stm32f0.c **** //*                - Two lines used                                  *
  21:Core/Inc/lcd_stm32f0.c **** //*                - Flashing cursor                                 *
  22:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  23:Core/Inc/lcd_stm32f0.c **** //* CONNECTIONS:                                                     *
  24:Core/Inc/lcd_stm32f0.c **** //*------------------------------------------------------------------*
  25:Core/Inc/lcd_stm32f0.c **** //* LCD PINS   | NAME                    | CONNECTED TO              *
  26:Core/Inc/lcd_stm32f0.c **** //*------------------------------------------------------------------*
  27:Core/Inc/lcd_stm32f0.c **** //* 1............VSS.......................GND                       *
  28:Core/Inc/lcd_stm32f0.c **** //* 2............VDD.......................+5V                       *
  29:Core/Inc/lcd_stm32f0.c **** //* 3............CONTRAST..................POT 2                     *
  30:Core/Inc/lcd_stm32f0.c **** //* 4............RS  - Register Select.....PC14 (LCD_RS)             *
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 2


  31:Core/Inc/lcd_stm32f0.c **** //* 5............RW  - Read/Write..........GND                       *
  32:Core/Inc/lcd_stm32f0.c **** //* 6............E   - Enable..............PC15 (LCD_E)              *
  33:Core/Inc/lcd_stm32f0.c **** //* 7............D0  - Data line 0.........GND                       *
  34:Core/Inc/lcd_stm32f0.c **** //* 8............D1  - Data line 1.........GND                       *
  35:Core/Inc/lcd_stm32f0.c **** //* 9............D2  - Data line 2.........GND                       *
  36:Core/Inc/lcd_stm32f0.c **** //* 10...........D3  - Data line 3.........GND                       *
  37:Core/Inc/lcd_stm32f0.c **** //* 11...........D4  - Data line 4.........PB8  (LCD_D4)             *
  38:Core/Inc/lcd_stm32f0.c **** //* 12...........D5  - Data line 5.........PB9  (LCD_D5)             *
  39:Core/Inc/lcd_stm32f0.c **** //* 13...........D6  - Data line 6.........PA12 (LCD_D6)             *
  40:Core/Inc/lcd_stm32f0.c **** //* 14...........D7  - Data line 7.........PA15 (LCD_D7)             *
  41:Core/Inc/lcd_stm32f0.c **** //* 15...........CATHLED...................NC                        *
  42:Core/Inc/lcd_stm32f0.c **** //* 16...........ANODELED..................NC                        *
  43:Core/Inc/lcd_stm32f0.c **** //********************************************************************
  44:Core/Inc/lcd_stm32f0.c **** // INCLUDE FILES
  45:Core/Inc/lcd_stm32f0.c **** //====================================================================
  46:Core/Inc/lcd_stm32f0.c **** #include "lcd_stm32f0.h"
  47:Core/Inc/lcd_stm32f0.c **** #include "stm32f0xx.h"
  48:Core/Inc/lcd_stm32f0.c **** //====================================================================
  49:Core/Inc/lcd_stm32f0.c **** // SEND COMMAND CODE TO LCD - LCD_Command(command)
  50:Core/Inc/lcd_stm32f0.c **** //====================================================================
  51:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: This function sends a command to the LCD. Care is taken
  52:Core/Inc/lcd_stm32f0.c **** //              not to interfere with the other lines on the port.
  53:Core/Inc/lcd_stm32f0.c **** //
  54:Core/Inc/lcd_stm32f0.c **** //              As we are using a microcontroller to control the LCD
  55:Core/Inc/lcd_stm32f0.c **** //              we use 4-bit mode to save on number of lines used to
  56:Core/Inc/lcd_stm32f0.c **** //              connect to the LCD. This means that an 8-bit command
  57:Core/Inc/lcd_stm32f0.c **** //              must be split into two sets of 4-bits (upper and lower)
  58:Core/Inc/lcd_stm32f0.c **** //              These sets must be transmitted
  59:Core/Inc/lcd_stm32f0.c **** //====================================================================
  60:Core/Inc/lcd_stm32f0.c **** // USEFUL COMMANDS:
  61:Core/Inc/lcd_stm32f0.c **** //                  - POWER_UP:      Power up initialization for the lcd
  62:Core/Inc/lcd_stm32f0.c **** //                  - FOURBIT_MODE:  Sets LCD for 4-bit mode
  63:Core/Inc/lcd_stm32f0.c **** //                  - TWOLINE_MODE:  Sets up 2 lines and character size
  64:Core/Inc/lcd_stm32f0.c **** //                  - SETUP_CURSOR:  Turn display on and set up cursor
  65:Core/Inc/lcd_stm32f0.c **** //                  - CLEAR:         Clear screen
  66:Core/Inc/lcd_stm32f0.c **** //                  - CURSOR_HOME:   Cursor home
  67:Core/Inc/lcd_stm32f0.c **** //                  - LINE_TWO:      Line 2
  68:Core/Inc/lcd_stm32f0.c **** //
  69:Core/Inc/lcd_stm32f0.c **** //====================================================================
  70:Core/Inc/lcd_stm32f0.c **** 
  71:Core/Inc/lcd_stm32f0.c **** void lcd_command(unsigned char command)
  72:Core/Inc/lcd_stm32f0.c **** {
  73:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
  74:Core/Inc/lcd_stm32f0.c **** 
  75:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
  76:Core/Inc/lcd_stm32f0.c **** // DATALINE 7
  77:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
  78:Core/Inc/lcd_stm32f0.c ****     {
  79:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_SET;
  80:Core/Inc/lcd_stm32f0.c ****     }
  81:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D7
  82:Core/Inc/lcd_stm32f0.c ****     {
  83:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_RESET;
  84:Core/Inc/lcd_stm32f0.c ****     }
  85:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
  86:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
  87:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 3


  88:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_SET;
  89:Core/Inc/lcd_stm32f0.c ****     }
  90:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D6
  91:Core/Inc/lcd_stm32f0.c ****     {
  92:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_RESET;
  93:Core/Inc/lcd_stm32f0.c ****     }
  94:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
  95:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
  96:Core/Inc/lcd_stm32f0.c ****     {
  97:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_SET;	
  98:Core/Inc/lcd_stm32f0.c ****     }
  99:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D5
 100:Core/Inc/lcd_stm32f0.c ****     {
 101:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_RESET;
 102:Core/Inc/lcd_stm32f0.c ****     }
 103:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 104:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 105:Core/Inc/lcd_stm32f0.c ****     {
 106:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_SET;
 107:Core/Inc/lcd_stm32f0.c ****     }
 108:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D4
 109:Core/Inc/lcd_stm32f0.c ****     {
 110:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_RESET;
 111:Core/Inc/lcd_stm32f0.c ****     }
 112:Core/Inc/lcd_stm32f0.c **** 
 113:Core/Inc/lcd_stm32f0.c ****     pulse_strobe ();			// Send data
 114:Core/Inc/lcd_stm32f0.c **** 
 115:Core/Inc/lcd_stm32f0.c **** // lower nibble to data lines
 116:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 117:Core/Inc/lcd_stm32f0.c ****     {
 118:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_SET;
 119:Core/Inc/lcd_stm32f0.c ****     }
 120:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D7
 121:Core/Inc/lcd_stm32f0.c ****     {
 122:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_RESET;
 123:Core/Inc/lcd_stm32f0.c ****     }
 124:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
 125:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 126:Core/Inc/lcd_stm32f0.c ****     {
 127:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_SET;
 128:Core/Inc/lcd_stm32f0.c ****     }
 129:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D6
 130:Core/Inc/lcd_stm32f0.c ****     {
 131:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_RESET;
 132:Core/Inc/lcd_stm32f0.c ****     }
 133:Core/Inc/lcd_stm32f0.c ****     // DATALINE 5
 134:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 135:Core/Inc/lcd_stm32f0.c ****     {
 136:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_SET;         
 137:Core/Inc/lcd_stm32f0.c ****     }
 138:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D5
 139:Core/Inc/lcd_stm32f0.c ****     {
 140:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_RESET;
 141:Core/Inc/lcd_stm32f0.c ****     }
 142:Core/Inc/lcd_stm32f0.c ****     // DATALINE 4
 143:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 144:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 4


 145:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_SET;
 146:Core/Inc/lcd_stm32f0.c ****     }
 147:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D4
 148:Core/Inc/lcd_stm32f0.c ****     {
 149:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_RESET;
 150:Core/Inc/lcd_stm32f0.c ****     }
 151:Core/Inc/lcd_stm32f0.c **** 
 152:Core/Inc/lcd_stm32f0.c ****     pulse_strobe();			// Send data
 153:Core/Inc/lcd_stm32f0.c ****     delay(3000);
 154:Core/Inc/lcd_stm32f0.c **** }
 155:Core/Inc/lcd_stm32f0.c **** 
 156:Core/Inc/lcd_stm32f0.c **** //====================================================================
 157:Core/Inc/lcd_stm32f0.c **** // INITIALISE LCD - LCD_Init()
 158:Core/Inc/lcd_stm32f0.c **** //====================================================================
 159:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: This function sets up the port lines for the LCD and
 160:Core/Inc/lcd_stm32f0.c **** //              intialises the module for use.
 161:Core/Inc/lcd_stm32f0.c **** //====================================================================
 162:Core/Inc/lcd_stm32f0.c **** // LCD SETUP:     - 4 bit mode      (Upper 4 data lines D4-D7 used)
 163:Core/Inc/lcd_stm32f0.c **** //                - Two lines used
 164:Core/Inc/lcd_stm32f0.c **** //                - Flashing cursor
 165:Core/Inc/lcd_stm32f0.c **** //====================================================================
 166:Core/Inc/lcd_stm32f0.c **** 
 167:Core/Inc/lcd_stm32f0.c **** void init_LCD(void)
 168:Core/Inc/lcd_stm32f0.c **** {
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 171:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 172:Core/Inc/lcd_stm32f0.c **** 
 173:Core/Inc/lcd_stm32f0.c ****     GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 174:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 175:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 176:Core/Inc/lcd_stm32f0.c **** 
 177:Core/Inc/lcd_stm32f0.c ****     delay(30000);			// Allow the LCD some power up time (~30ms)
 178:Core/Inc/lcd_stm32f0.c **** 
 179:Core/Inc/lcd_stm32f0.c ****     lcd_command(POWER_UP);		// Power up initialization for the lcd
 180:Core/Inc/lcd_stm32f0.c ****     lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 181:Core/Inc/lcd_stm32f0.c ****     lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 182:Core/Inc/lcd_stm32f0.c ****     lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 183:Core/Inc/lcd_stm32f0.c ****     lcd_command(CLEAR);			// Clear display
 184:Core/Inc/lcd_stm32f0.c **** }
 185:Core/Inc/lcd_stm32f0.c **** 
 186:Core/Inc/lcd_stm32f0.c **** //====================================================================
 187:Core/Inc/lcd_stm32f0.c **** // WRITE A SINGLE CHARACTER TO THE LCD - LCD_PutChar(character)
 188:Core/Inc/lcd_stm32f0.c **** //====================================================================
 189:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Puts a single character on the LCD at the next position
 190:Core/Inc/lcd_stm32f0.c **** //              on the screen. The character to be printed is in the input
 191:Core/Inc/lcd_stm32f0.c **** //              parameter. For numbers, letters and other common characters
 192:Core/Inc/lcd_stm32f0.c **** //              the ASCII code will produce correct display.
 193:Core/Inc/lcd_stm32f0.c **** //
 194:Core/Inc/lcd_stm32f0.c **** //              Refer to the Hitachi HD44780 datasheet for full character
 195:Core/Inc/lcd_stm32f0.c **** //              set information.
 196:Core/Inc/lcd_stm32f0.c **** //====================================================================
 197:Core/Inc/lcd_stm32f0.c **** 
 198:Core/Inc/lcd_stm32f0.c ****  void lcd_putchar(unsigned char character)
 199:Core/Inc/lcd_stm32f0.c **** {
 200:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 201:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 5


 202:Core/Inc/lcd_stm32f0.c **** // DATALINE 7
 203:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 204:Core/Inc/lcd_stm32f0.c ****         {
 205:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_SET;
 206:Core/Inc/lcd_stm32f0.c ****         }
 207:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D7
 208:Core/Inc/lcd_stm32f0.c ****         {
 209:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_RESET;
 210:Core/Inc/lcd_stm32f0.c ****         }
 211:Core/Inc/lcd_stm32f0.c ****         // DATALINE 6
 212:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)      
 213:Core/Inc/lcd_stm32f0.c **** 	{
 214:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_SET;
 215:Core/Inc/lcd_stm32f0.c ****         }
 216:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D6
 217:Core/Inc/lcd_stm32f0.c **** 
 218:Core/Inc/lcd_stm32f0.c ****         {
 219:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_RESET;
 220:Core/Inc/lcd_stm32f0.c ****         }
 221:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
 222:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 223:Core/Inc/lcd_stm32f0.c **** 
 224:Core/Inc/lcd_stm32f0.c ****         {
 225:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_SET;                 
 226:Core/Inc/lcd_stm32f0.c **** 	}
 227:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D5
 228:Core/Inc/lcd_stm32f0.c ****         {
 229:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_RESET;
 230:Core/Inc/lcd_stm32f0.c ****         }
 231:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 232:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 233:Core/Inc/lcd_stm32f0.c ****         {
 234:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_SET;
 235:Core/Inc/lcd_stm32f0.c ****         }
 236:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D4
 237:Core/Inc/lcd_stm32f0.c ****         {
 238:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_RESET;
 239:Core/Inc/lcd_stm32f0.c ****         }
 240:Core/Inc/lcd_stm32f0.c **** 
 241:Core/Inc/lcd_stm32f0.c ****         pulse_strobe ();		// Send data
 242:Core/Inc/lcd_stm32f0.c **** 
 243:Core/Inc/lcd_stm32f0.c **** // lower nibble to data lines
 244:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 245:Core/Inc/lcd_stm32f0.c ****         {
 246:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_SET;
 247:Core/Inc/lcd_stm32f0.c ****         }
 248:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D7
 249:Core/Inc/lcd_stm32f0.c ****         {
 250:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_RESET;
 251:Core/Inc/lcd_stm32f0.c ****         }
 252:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
 253:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)      
 254:Core/Inc/lcd_stm32f0.c **** 	{
 255:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_SET;
 256:Core/Inc/lcd_stm32f0.c ****         }
 257:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D6
 258:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 6


 259:Core/Inc/lcd_stm32f0.c ****         {
 260:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_RESET;
 261:Core/Inc/lcd_stm32f0.c ****         }
 262:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
 263:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 264:Core/Inc/lcd_stm32f0.c ****         {
 265:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_SET;       
 266:Core/Inc/lcd_stm32f0.c **** 	}
 267:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D5
 268:Core/Inc/lcd_stm32f0.c ****         {
 269:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_RESET;
 270:Core/Inc/lcd_stm32f0.c ****         }
 271:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 272:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 273:Core/Inc/lcd_stm32f0.c ****         {
 274:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_SET;
 275:Core/Inc/lcd_stm32f0.c ****         }
 276:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D4
 277:Core/Inc/lcd_stm32f0.c ****         {
 278:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_RESET;
 279:Core/Inc/lcd_stm32f0.c ****         }
 280:Core/Inc/lcd_stm32f0.c **** 
 281:Core/Inc/lcd_stm32f0.c ****         pulse_strobe();			// Send data
 282:Core/Inc/lcd_stm32f0.c **** }
 283:Core/Inc/lcd_stm32f0.c **** 
 284:Core/Inc/lcd_stm32f0.c **** //====================================================================
 285:Core/Inc/lcd_stm32f0.c **** // WRITE A STRING TO THE LCD - LCD_PutString(ptr_String)
 286:Core/Inc/lcd_stm32f0.c **** //====================================================================
 287:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Writes a string to the LCD
 288:Core/Inc/lcd_stm32f0.c **** //====================================================================
 289:Core/Inc/lcd_stm32f0.c **** 
 290:Core/Inc/lcd_stm32f0.c **** void lcd_putstring(char *instring)
 291:Core/Inc/lcd_stm32f0.c **** {
 292:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 293:Core/Inc/lcd_stm32f0.c **** 
 294:Core/Inc/lcd_stm32f0.c ****     while (instring[count])		// Until the null terminator is reached
 295:Core/Inc/lcd_stm32f0.c ****     {
 296:Core/Inc/lcd_stm32f0.c ****     	lcd_putchar(instring[count]);	// Write each character to LCD
 297:Core/Inc/lcd_stm32f0.c **** 	    count++;
 298:Core/Inc/lcd_stm32f0.c **** 	 }
 299:Core/Inc/lcd_stm32f0.c **** }
 300:Core/Inc/lcd_stm32f0.c **** 
 301:Core/Inc/lcd_stm32f0.c **** 
 302:Core/Inc/lcd_stm32f0.c **** //====================================================================
 303:Core/Inc/lcd_stm32f0.c **** // PULSE STROBE - Pulse_Strobe()
 304:Core/Inc/lcd_stm32f0.c **** //====================================================================
 305:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Pulse the strobe line of the LCD to indicate that data is ready.
 306:Core/Inc/lcd_stm32f0.c **** //====================================================================
 307:Core/Inc/lcd_stm32f0.c **** 
 308:Core/Inc/lcd_stm32f0.c **** void pulse_strobe(void)
 309:Core/Inc/lcd_stm32f0.c **** {
 310:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 311:Core/Inc/lcd_stm32f0.c **** 
 312:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 313:Core/Inc/lcd_stm32f0.c **** 
 314:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 315:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 7


 316:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 317:Core/Inc/lcd_stm32f0.c **** 
 318:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 319:Core/Inc/lcd_stm32f0.c **** 
 320:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 321:Core/Inc/lcd_stm32f0.c **** }
 322:Core/Inc/lcd_stm32f0.c **** 
 323:Core/Inc/lcd_stm32f0.c **** 
 324:Core/Inc/lcd_stm32f0.c **** //====================================================================
 325:Core/Inc/lcd_stm32f0.c **** // LOOP DELAY - delay(microseconds)
 326:Core/Inc/lcd_stm32f0.c **** //====================================================================
 327:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: A delay used by the LCD functions.
 328:Core/Inc/lcd_stm32f0.c **** //====================================================================
 329:Core/Inc/lcd_stm32f0.c **** 
 330:Core/Inc/lcd_stm32f0.c **** void delay(unsigned int microseconds)
 331:Core/Inc/lcd_stm32f0.c **** {
  29              		.loc 2 331 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 2 331 1 is_stmt 0 view .LVU1
  35 0000 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 8
 332:Core/Inc/lcd_stm32f0.c **** 	  volatile unsigned int counter;
  37              		.loc 2 332 4 is_stmt 1 view .LVU2
 333:Core/Inc/lcd_stm32f0.c **** 	  microseconds *= 3;
  38              		.loc 2 333 4 view .LVU3
  39              		.loc 2 333 17 is_stmt 0 view .LVU4
  40 0002 4300     		lsls	r3, r0, #1
  41 0004 1818     		adds	r0, r3, r0
  42              	.LVL1:
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  43              		.loc 2 334 4 is_stmt 1 view .LVU5
  44              		.loc 2 334 16 is_stmt 0 view .LVU6
  45 0006 0023     		movs	r3, #0
  46 0008 0193     		str	r3, [sp, #4]
  47              		.loc 2 334 4 view .LVU7
  48 000a 04E0     		b	.L2
  49              	.L3:
 335:Core/Inc/lcd_stm32f0.c **** 	  {
 336:Core/Inc/lcd_stm32f0.c **** 	    __asm("nop");
  50              		.loc 2 336 6 is_stmt 1 discriminator 3 view .LVU8
  51              		.syntax divided
  52              	@ 336 "Core/Inc/lcd_stm32f0.c" 1
  53 000c C046     		nop
  54              	@ 0 "" 2
 337:Core/Inc/lcd_stm32f0.c **** 	    __asm("nop");
  55              		.loc 2 337 6 discriminator 3 view .LVU9
  56              	@ 337 "Core/Inc/lcd_stm32f0.c" 1
  57 000e C046     		nop
  58              	@ 0 "" 2
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  59              		.loc 2 334 50 discriminator 3 view .LVU10
  60              		.thumb
  61              		.syntax unified
  62 0010 019B     		ldr	r3, [sp, #4]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 8


  63 0012 0133     		adds	r3, r3, #1
  64 0014 0193     		str	r3, [sp, #4]
  65              	.L2:
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  66              		.loc 2 334 28 discriminator 1 view .LVU11
  67 0016 019B     		ldr	r3, [sp, #4]
  68 0018 8342     		cmp	r3, r0
  69 001a F7D3     		bcc	.L3
 338:Core/Inc/lcd_stm32f0.c **** 	  }
 339:Core/Inc/lcd_stm32f0.c **** }
  70              		.loc 2 339 1 is_stmt 0 view .LVU12
  71 001c 02B0     		add	sp, sp, #8
  72              		@ sp needed
  73 001e 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE48:
  77              		.section	.text.pulse_strobe,"ax",%progbits
  78              		.align	1
  79              		.global	pulse_strobe
  80              		.syntax unified
  81              		.code	16
  82              		.thumb_func
  84              	pulse_strobe:
  85              	.LFB47:
 309:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
  86              		.loc 2 309 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 70B5     		push	{r4, r5, r6, lr}
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 4, -16
  93              		.cfi_offset 5, -12
  94              		.cfi_offset 6, -8
  95              		.cfi_offset 14, -4
 310:Core/Inc/lcd_stm32f0.c **** 
  96              		.loc 2 310 5 view .LVU14
  97 0002 1420     		movs	r0, #20
  98 0004 FFF7FEFF 		bl	delay
  99              	.LVL2:
 312:Core/Inc/lcd_stm32f0.c **** 
 100              		.loc 2 312 5 view .LVU15
 312:Core/Inc/lcd_stm32f0.c **** 
 101              		.loc 2 312 10 is_stmt 0 view .LVU16
 102 0008 0A4C     		ldr	r4, .L5
 103 000a A369     		ldr	r3, [r4, #24]
 312:Core/Inc/lcd_stm32f0.c **** 
 104              		.loc 2 312 17 view .LVU17
 105 000c 8025     		movs	r5, #128
 106 000e 2D02     		lsls	r5, r5, #8
 107 0010 2B43     		orrs	r3, r5
 108 0012 A361     		str	r3, [r4, #24]
 314:Core/Inc/lcd_stm32f0.c **** 
 109              		.loc 2 314 5 is_stmt 1 view .LVU18
 110 0014 1420     		movs	r0, #20
 111 0016 FFF7FEFF 		bl	delay
 112              	.LVL3:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 9


 316:Core/Inc/lcd_stm32f0.c **** 
 113              		.loc 2 316 5 view .LVU19
 316:Core/Inc/lcd_stm32f0.c **** 
 114              		.loc 2 316 10 is_stmt 0 view .LVU20
 115 001a A269     		ldr	r2, [r4, #24]
 316:Core/Inc/lcd_stm32f0.c **** 
 116              		.loc 2 316 17 view .LVU21
 117 001c 8023     		movs	r3, #128
 118 001e 1B06     		lsls	r3, r3, #24
 119 0020 1343     		orrs	r3, r2
 120 0022 A361     		str	r3, [r4, #24]
 318:Core/Inc/lcd_stm32f0.c **** 
 121              		.loc 2 318 5 is_stmt 1 view .LVU22
 122 0024 1420     		movs	r0, #20
 123 0026 FFF7FEFF 		bl	delay
 124              	.LVL4:
 320:Core/Inc/lcd_stm32f0.c **** }
 125              		.loc 2 320 5 view .LVU23
 320:Core/Inc/lcd_stm32f0.c **** }
 126              		.loc 2 320 10 is_stmt 0 view .LVU24
 127 002a A369     		ldr	r3, [r4, #24]
 320:Core/Inc/lcd_stm32f0.c **** }
 128              		.loc 2 320 17 view .LVU25
 129 002c 1D43     		orrs	r5, r3
 130 002e A561     		str	r5, [r4, #24]
 321:Core/Inc/lcd_stm32f0.c **** 
 131              		.loc 2 321 1 view .LVU26
 132              		@ sp needed
 133 0030 70BD     		pop	{r4, r5, r6, pc}
 134              	.L6:
 135 0032 C046     		.align	2
 136              	.L5:
 137 0034 00080048 		.word	1207961600
 138              		.cfi_endproc
 139              	.LFE47:
 141              		.section	.text.lcd_putchar,"ax",%progbits
 142              		.align	1
 143              		.global	lcd_putchar
 144              		.syntax unified
 145              		.code	16
 146              		.thumb_func
 148              	lcd_putchar:
 149              	.LVL5:
 150              	.LFB45:
 199:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 151              		.loc 2 199 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 199:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 155              		.loc 2 199 1 is_stmt 0 view .LVU28
 156 0000 10B5     		push	{r4, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
 160 0002 0400     		movs	r4, r0
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 10


 161              		.loc 2 200 2 is_stmt 1 view .LVU29
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
 162              		.loc 2 200 7 is_stmt 0 view .LVU30
 163 0004 454A     		ldr	r2, .L25
 164 0006 9169     		ldr	r1, [r2, #24]
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
 165              		.loc 2 200 14 view .LVU31
 166 0008 8023     		movs	r3, #128
 167 000a DB01     		lsls	r3, r3, #7
 168 000c 0B43     		orrs	r3, r1
 169 000e 9361     		str	r3, [r2, #24]
 203:Core/Inc/lcd_stm32f0.c ****         {
 170              		.loc 2 203 9 is_stmt 1 view .LVU32
 203:Core/Inc/lcd_stm32f0.c ****         {
 171              		.loc 2 203 32 is_stmt 0 view .LVU33
 172 0010 43B2     		sxtb	r3, r0
 203:Core/Inc/lcd_stm32f0.c ****         {
 173              		.loc 2 203 12 view .LVU34
 174 0012 002B     		cmp	r3, #0
 175 0014 46DB     		blt	.L24
 209:Core/Inc/lcd_stm32f0.c ****         }
 176              		.loc 2 209 10 is_stmt 1 view .LVU35
 209:Core/Inc/lcd_stm32f0.c ****         }
 177              		.loc 2 209 15 is_stmt 0 view .LVU36
 178 0016 9022     		movs	r2, #144
 179 0018 D205     		lsls	r2, r2, #23
 180 001a 9169     		ldr	r1, [r2, #24]
 209:Core/Inc/lcd_stm32f0.c ****         }
 181              		.loc 2 209 22 view .LVU37
 182 001c 8023     		movs	r3, #128
 183 001e 1B06     		lsls	r3, r3, #24
 184 0020 0B43     		orrs	r3, r1
 185 0022 9361     		str	r3, [r2, #24]
 186              	.L9:
 212:Core/Inc/lcd_stm32f0.c **** 	{
 187              		.loc 2 212 9 is_stmt 1 view .LVU38
 212:Core/Inc/lcd_stm32f0.c **** 	{
 188              		.loc 2 212 12 is_stmt 0 view .LVU39
 189 0024 6306     		lsls	r3, r4, #25
 190 0026 45D5     		bpl	.L10
 214:Core/Inc/lcd_stm32f0.c ****         }
 191              		.loc 2 214 13 is_stmt 1 view .LVU40
 214:Core/Inc/lcd_stm32f0.c ****         }
 192              		.loc 2 214 18 is_stmt 0 view .LVU41
 193 0028 9022     		movs	r2, #144
 194 002a D205     		lsls	r2, r2, #23
 195 002c 9169     		ldr	r1, [r2, #24]
 214:Core/Inc/lcd_stm32f0.c ****         }
 196              		.loc 2 214 25 view .LVU42
 197 002e 8023     		movs	r3, #128
 198 0030 5B01     		lsls	r3, r3, #5
 199 0032 0B43     		orrs	r3, r1
 200 0034 9361     		str	r3, [r2, #24]
 201              	.L11:
 222:Core/Inc/lcd_stm32f0.c **** 
 202              		.loc 2 222 9 is_stmt 1 view .LVU43
 222:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 11


 203              		.loc 2 222 12 is_stmt 0 view .LVU44
 204 0036 A306     		lsls	r3, r4, #26
 205 0038 44D5     		bpl	.L12
 225:Core/Inc/lcd_stm32f0.c **** 	}
 206              		.loc 2 225 10 is_stmt 1 view .LVU45
 225:Core/Inc/lcd_stm32f0.c **** 	}
 207              		.loc 2 225 15 is_stmt 0 view .LVU46
 208 003a 394A     		ldr	r2, .L25+4
 209 003c 9169     		ldr	r1, [r2, #24]
 225:Core/Inc/lcd_stm32f0.c **** 	}
 210              		.loc 2 225 22 view .LVU47
 211 003e 8023     		movs	r3, #128
 212 0040 9B00     		lsls	r3, r3, #2
 213 0042 0B43     		orrs	r3, r1
 214 0044 9361     		str	r3, [r2, #24]
 215              	.L13:
 232:Core/Inc/lcd_stm32f0.c ****         {
 216              		.loc 2 232 9 is_stmt 1 view .LVU48
 232:Core/Inc/lcd_stm32f0.c ****         {
 217              		.loc 2 232 12 is_stmt 0 view .LVU49
 218 0046 E306     		lsls	r3, r4, #27
 219 0048 43D5     		bpl	.L14
 234:Core/Inc/lcd_stm32f0.c ****         }
 220              		.loc 2 234 10 is_stmt 1 view .LVU50
 234:Core/Inc/lcd_stm32f0.c ****         }
 221              		.loc 2 234 15 is_stmt 0 view .LVU51
 222 004a 354A     		ldr	r2, .L25+4
 223 004c 9169     		ldr	r1, [r2, #24]
 234:Core/Inc/lcd_stm32f0.c ****         }
 224              		.loc 2 234 22 view .LVU52
 225 004e 8023     		movs	r3, #128
 226 0050 5B00     		lsls	r3, r3, #1
 227 0052 0B43     		orrs	r3, r1
 228 0054 9361     		str	r3, [r2, #24]
 229              	.L15:
 241:Core/Inc/lcd_stm32f0.c **** 
 230              		.loc 2 241 9 is_stmt 1 view .LVU53
 231 0056 FFF7FEFF 		bl	pulse_strobe
 232              	.LVL6:
 244:Core/Inc/lcd_stm32f0.c ****         {
 233              		.loc 2 244 9 view .LVU54
 244:Core/Inc/lcd_stm32f0.c ****         {
 234              		.loc 2 244 12 is_stmt 0 view .LVU55
 235 005a 2307     		lsls	r3, r4, #28
 236 005c 40D5     		bpl	.L16
 246:Core/Inc/lcd_stm32f0.c ****         }
 237              		.loc 2 246 10 is_stmt 1 view .LVU56
 246:Core/Inc/lcd_stm32f0.c ****         }
 238              		.loc 2 246 15 is_stmt 0 view .LVU57
 239 005e 9022     		movs	r2, #144
 240 0060 D205     		lsls	r2, r2, #23
 241 0062 9169     		ldr	r1, [r2, #24]
 246:Core/Inc/lcd_stm32f0.c ****         }
 242              		.loc 2 246 22 view .LVU58
 243 0064 8023     		movs	r3, #128
 244 0066 1B02     		lsls	r3, r3, #8
 245 0068 0B43     		orrs	r3, r1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 12


 246 006a 9361     		str	r3, [r2, #24]
 247              	.L17:
 253:Core/Inc/lcd_stm32f0.c **** 	{
 248              		.loc 2 253 9 is_stmt 1 view .LVU59
 253:Core/Inc/lcd_stm32f0.c **** 	{
 249              		.loc 2 253 12 is_stmt 0 view .LVU60
 250 006c 6307     		lsls	r3, r4, #29
 251 006e 3FD5     		bpl	.L18
 255:Core/Inc/lcd_stm32f0.c ****         }
 252              		.loc 2 255 13 is_stmt 1 view .LVU61
 255:Core/Inc/lcd_stm32f0.c ****         }
 253              		.loc 2 255 18 is_stmt 0 view .LVU62
 254 0070 9022     		movs	r2, #144
 255 0072 D205     		lsls	r2, r2, #23
 256 0074 9169     		ldr	r1, [r2, #24]
 255:Core/Inc/lcd_stm32f0.c ****         }
 257              		.loc 2 255 25 view .LVU63
 258 0076 8023     		movs	r3, #128
 259 0078 5B01     		lsls	r3, r3, #5
 260 007a 0B43     		orrs	r3, r1
 261 007c 9361     		str	r3, [r2, #24]
 262              	.L19:
 263:Core/Inc/lcd_stm32f0.c ****         {
 263              		.loc 2 263 9 is_stmt 1 view .LVU64
 263:Core/Inc/lcd_stm32f0.c ****         {
 264              		.loc 2 263 12 is_stmt 0 view .LVU65
 265 007e A307     		lsls	r3, r4, #30
 266 0080 3ED5     		bpl	.L20
 265:Core/Inc/lcd_stm32f0.c **** 	}
 267              		.loc 2 265 10 is_stmt 1 view .LVU66
 265:Core/Inc/lcd_stm32f0.c **** 	}
 268              		.loc 2 265 15 is_stmt 0 view .LVU67
 269 0082 274A     		ldr	r2, .L25+4
 270 0084 9169     		ldr	r1, [r2, #24]
 265:Core/Inc/lcd_stm32f0.c **** 	}
 271              		.loc 2 265 22 view .LVU68
 272 0086 8023     		movs	r3, #128
 273 0088 9B00     		lsls	r3, r3, #2
 274 008a 0B43     		orrs	r3, r1
 275 008c 9361     		str	r3, [r2, #24]
 276              	.L21:
 272:Core/Inc/lcd_stm32f0.c ****         {
 277              		.loc 2 272 9 is_stmt 1 view .LVU69
 272:Core/Inc/lcd_stm32f0.c ****         {
 278              		.loc 2 272 12 is_stmt 0 view .LVU70
 279 008e E407     		lsls	r4, r4, #31
 280 0090 3DD5     		bpl	.L22
 274:Core/Inc/lcd_stm32f0.c ****         }
 281              		.loc 2 274 10 is_stmt 1 view .LVU71
 274:Core/Inc/lcd_stm32f0.c ****         }
 282              		.loc 2 274 15 is_stmt 0 view .LVU72
 283 0092 234A     		ldr	r2, .L25+4
 284 0094 9169     		ldr	r1, [r2, #24]
 274:Core/Inc/lcd_stm32f0.c ****         }
 285              		.loc 2 274 22 view .LVU73
 286 0096 8023     		movs	r3, #128
 287 0098 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 13


 288 009a 0B43     		orrs	r3, r1
 289 009c 9361     		str	r3, [r2, #24]
 290              	.L23:
 281:Core/Inc/lcd_stm32f0.c **** }
 291              		.loc 2 281 9 is_stmt 1 view .LVU74
 292 009e FFF7FEFF 		bl	pulse_strobe
 293              	.LVL7:
 282:Core/Inc/lcd_stm32f0.c **** 
 294              		.loc 2 282 1 is_stmt 0 view .LVU75
 295              		@ sp needed
 296 00a2 10BD     		pop	{r4, pc}
 297              	.LVL8:
 298              	.L24:
 205:Core/Inc/lcd_stm32f0.c ****         }
 299              		.loc 2 205 10 is_stmt 1 view .LVU76
 205:Core/Inc/lcd_stm32f0.c ****         }
 300              		.loc 2 205 15 is_stmt 0 view .LVU77
 301 00a4 9022     		movs	r2, #144
 302 00a6 D205     		lsls	r2, r2, #23
 303 00a8 9169     		ldr	r1, [r2, #24]
 205:Core/Inc/lcd_stm32f0.c ****         }
 304              		.loc 2 205 22 view .LVU78
 305 00aa 8023     		movs	r3, #128
 306 00ac 1B02     		lsls	r3, r3, #8
 307 00ae 0B43     		orrs	r3, r1
 308 00b0 9361     		str	r3, [r2, #24]
 309 00b2 B7E7     		b	.L9
 310              	.L10:
 219:Core/Inc/lcd_stm32f0.c ****         }
 311              		.loc 2 219 13 is_stmt 1 view .LVU79
 219:Core/Inc/lcd_stm32f0.c ****         }
 312              		.loc 2 219 18 is_stmt 0 view .LVU80
 313 00b4 9022     		movs	r2, #144
 314 00b6 D205     		lsls	r2, r2, #23
 315 00b8 9169     		ldr	r1, [r2, #24]
 219:Core/Inc/lcd_stm32f0.c ****         }
 316              		.loc 2 219 25 view .LVU81
 317 00ba 8023     		movs	r3, #128
 318 00bc 5B05     		lsls	r3, r3, #21
 319 00be 0B43     		orrs	r3, r1
 320 00c0 9361     		str	r3, [r2, #24]
 321 00c2 B8E7     		b	.L11
 322              	.L12:
 229:Core/Inc/lcd_stm32f0.c ****         }
 323              		.loc 2 229 10 is_stmt 1 view .LVU82
 229:Core/Inc/lcd_stm32f0.c ****         }
 324              		.loc 2 229 15 is_stmt 0 view .LVU83
 325 00c4 164A     		ldr	r2, .L25+4
 326 00c6 9169     		ldr	r1, [r2, #24]
 229:Core/Inc/lcd_stm32f0.c ****         }
 327              		.loc 2 229 22 view .LVU84
 328 00c8 8023     		movs	r3, #128
 329 00ca 9B04     		lsls	r3, r3, #18
 330 00cc 0B43     		orrs	r3, r1
 331 00ce 9361     		str	r3, [r2, #24]
 332 00d0 B9E7     		b	.L13
 333              	.L14:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 14


 238:Core/Inc/lcd_stm32f0.c ****         }
 334              		.loc 2 238 10 is_stmt 1 view .LVU85
 238:Core/Inc/lcd_stm32f0.c ****         }
 335              		.loc 2 238 15 is_stmt 0 view .LVU86
 336 00d2 134A     		ldr	r2, .L25+4
 337 00d4 9169     		ldr	r1, [r2, #24]
 238:Core/Inc/lcd_stm32f0.c ****         }
 338              		.loc 2 238 22 view .LVU87
 339 00d6 8023     		movs	r3, #128
 340 00d8 5B04     		lsls	r3, r3, #17
 341 00da 0B43     		orrs	r3, r1
 342 00dc 9361     		str	r3, [r2, #24]
 343 00de BAE7     		b	.L15
 344              	.LVL9:
 345              	.L16:
 250:Core/Inc/lcd_stm32f0.c ****         }
 346              		.loc 2 250 10 is_stmt 1 view .LVU88
 250:Core/Inc/lcd_stm32f0.c ****         }
 347              		.loc 2 250 15 is_stmt 0 view .LVU89
 348 00e0 9022     		movs	r2, #144
 349 00e2 D205     		lsls	r2, r2, #23
 350 00e4 9169     		ldr	r1, [r2, #24]
 250:Core/Inc/lcd_stm32f0.c ****         }
 351              		.loc 2 250 22 view .LVU90
 352 00e6 8023     		movs	r3, #128
 353 00e8 1B06     		lsls	r3, r3, #24
 354 00ea 0B43     		orrs	r3, r1
 355 00ec 9361     		str	r3, [r2, #24]
 356 00ee BDE7     		b	.L17
 357              	.L18:
 260:Core/Inc/lcd_stm32f0.c ****         }
 358              		.loc 2 260 13 is_stmt 1 view .LVU91
 260:Core/Inc/lcd_stm32f0.c ****         }
 359              		.loc 2 260 18 is_stmt 0 view .LVU92
 360 00f0 9022     		movs	r2, #144
 361 00f2 D205     		lsls	r2, r2, #23
 362 00f4 9169     		ldr	r1, [r2, #24]
 260:Core/Inc/lcd_stm32f0.c ****         }
 363              		.loc 2 260 25 view .LVU93
 364 00f6 8023     		movs	r3, #128
 365 00f8 5B05     		lsls	r3, r3, #21
 366 00fa 0B43     		orrs	r3, r1
 367 00fc 9361     		str	r3, [r2, #24]
 368 00fe BEE7     		b	.L19
 369              	.L20:
 269:Core/Inc/lcd_stm32f0.c ****         }
 370              		.loc 2 269 10 is_stmt 1 view .LVU94
 269:Core/Inc/lcd_stm32f0.c ****         }
 371              		.loc 2 269 15 is_stmt 0 view .LVU95
 372 0100 074A     		ldr	r2, .L25+4
 373 0102 9169     		ldr	r1, [r2, #24]
 269:Core/Inc/lcd_stm32f0.c ****         }
 374              		.loc 2 269 22 view .LVU96
 375 0104 8023     		movs	r3, #128
 376 0106 9B04     		lsls	r3, r3, #18
 377 0108 0B43     		orrs	r3, r1
 378 010a 9361     		str	r3, [r2, #24]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 15


 379 010c BFE7     		b	.L21
 380              	.L22:
 278:Core/Inc/lcd_stm32f0.c ****         }
 381              		.loc 2 278 10 is_stmt 1 view .LVU97
 278:Core/Inc/lcd_stm32f0.c ****         }
 382              		.loc 2 278 15 is_stmt 0 view .LVU98
 383 010e 044A     		ldr	r2, .L25+4
 384 0110 9169     		ldr	r1, [r2, #24]
 278:Core/Inc/lcd_stm32f0.c ****         }
 385              		.loc 2 278 22 view .LVU99
 386 0112 8023     		movs	r3, #128
 387 0114 5B04     		lsls	r3, r3, #17
 388 0116 0B43     		orrs	r3, r1
 389 0118 9361     		str	r3, [r2, #24]
 390 011a C0E7     		b	.L23
 391              	.L26:
 392              		.align	2
 393              	.L25:
 394 011c 00080048 		.word	1207961600
 395 0120 00040048 		.word	1207960576
 396              		.cfi_endproc
 397              	.LFE45:
 399              		.section	.text.lcd_putstring,"ax",%progbits
 400              		.align	1
 401              		.global	lcd_putstring
 402              		.syntax unified
 403              		.code	16
 404              		.thumb_func
 406              	lcd_putstring:
 407              	.LVL10:
 408              	.LFB46:
 291:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 409              		.loc 2 291 1 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 291:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 413              		.loc 2 291 1 is_stmt 0 view .LVU101
 414 0000 70B5     		push	{r4, r5, r6, lr}
 415              		.cfi_def_cfa_offset 16
 416              		.cfi_offset 4, -16
 417              		.cfi_offset 5, -12
 418              		.cfi_offset 6, -8
 419              		.cfi_offset 14, -4
 420 0002 0500     		movs	r5, r0
 292:Core/Inc/lcd_stm32f0.c **** 
 421              		.loc 2 292 5 is_stmt 1 view .LVU102
 422              	.LVL11:
 294:Core/Inc/lcd_stm32f0.c ****     {
 423              		.loc 2 294 5 view .LVU103
 292:Core/Inc/lcd_stm32f0.c **** 
 424              		.loc 2 292 19 is_stmt 0 view .LVU104
 425 0004 0024     		movs	r4, #0
 294:Core/Inc/lcd_stm32f0.c ****     {
 426              		.loc 2 294 11 view .LVU105
 427 0006 03E0     		b	.L28
 428              	.LVL12:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 16


 429              	.L29:
 296:Core/Inc/lcd_stm32f0.c **** 	    count++;
 430              		.loc 2 296 6 is_stmt 1 view .LVU106
 431 0008 FFF7FEFF 		bl	lcd_putchar
 432              	.LVL13:
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 433              		.loc 2 297 6 view .LVU107
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 434              		.loc 2 297 11 is_stmt 0 view .LVU108
 435 000c 0134     		adds	r4, r4, #1
 436              	.LVL14:
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 437              		.loc 2 297 11 view .LVU109
 438 000e E4B2     		uxtb	r4, r4
 439              	.LVL15:
 440              	.L28:
 294:Core/Inc/lcd_stm32f0.c ****     {
 441              		.loc 2 294 12 is_stmt 1 view .LVU110
 294:Core/Inc/lcd_stm32f0.c ****     {
 442              		.loc 2 294 20 is_stmt 0 view .LVU111
 443 0010 285D     		ldrb	r0, [r5, r4]
 294:Core/Inc/lcd_stm32f0.c ****     {
 444              		.loc 2 294 12 view .LVU112
 445 0012 0028     		cmp	r0, #0
 446 0014 F8D1     		bne	.L29
 299:Core/Inc/lcd_stm32f0.c **** 
 447              		.loc 2 299 1 view .LVU113
 448              		@ sp needed
 449              	.LVL16:
 450              	.LVL17:
 299:Core/Inc/lcd_stm32f0.c **** 
 451              		.loc 2 299 1 view .LVU114
 452 0016 70BD     		pop	{r4, r5, r6, pc}
 453              		.cfi_endproc
 454              	.LFE46:
 456              		.section	.text.lcd_command,"ax",%progbits
 457              		.align	1
 458              		.global	lcd_command
 459              		.syntax unified
 460              		.code	16
 461              		.thumb_func
 463              	lcd_command:
 464              	.LVL18:
 465              	.LFB43:
  72:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
 466              		.loc 2 72 1 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
  72:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
 470              		.loc 2 72 1 is_stmt 0 view .LVU116
 471 0000 10B5     		push	{r4, lr}
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 475 0002 0400     		movs	r4, r0
  73:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 17


 476              		.loc 2 73 5 is_stmt 1 view .LVU117
  73:Core/Inc/lcd_stm32f0.c **** 
 477              		.loc 2 73 10 is_stmt 0 view .LVU118
 478 0004 474A     		ldr	r2, .L48
 479 0006 9169     		ldr	r1, [r2, #24]
  73:Core/Inc/lcd_stm32f0.c **** 
 480              		.loc 2 73 17 view .LVU119
 481 0008 8023     		movs	r3, #128
 482 000a DB05     		lsls	r3, r3, #23
 483 000c 0B43     		orrs	r3, r1
 484 000e 9361     		str	r3, [r2, #24]
  77:Core/Inc/lcd_stm32f0.c ****     {
 485              		.loc 2 77 5 is_stmt 1 view .LVU120
  77:Core/Inc/lcd_stm32f0.c ****     {
 486              		.loc 2 77 26 is_stmt 0 view .LVU121
 487 0010 43B2     		sxtb	r3, r0
  77:Core/Inc/lcd_stm32f0.c ****     {
 488              		.loc 2 77 8 view .LVU122
 489 0012 002B     		cmp	r3, #0
 490 0014 49DB     		blt	.L47
  83:Core/Inc/lcd_stm32f0.c ****     }
 491              		.loc 2 83 6 is_stmt 1 view .LVU123
  83:Core/Inc/lcd_stm32f0.c ****     }
 492              		.loc 2 83 11 is_stmt 0 view .LVU124
 493 0016 9022     		movs	r2, #144
 494 0018 D205     		lsls	r2, r2, #23
 495 001a 9169     		ldr	r1, [r2, #24]
  83:Core/Inc/lcd_stm32f0.c ****     }
 496              		.loc 2 83 18 view .LVU125
 497 001c 8023     		movs	r3, #128
 498 001e 1B06     		lsls	r3, r3, #24
 499 0020 0B43     		orrs	r3, r1
 500 0022 9361     		str	r3, [r2, #24]
 501              	.L32:
  86:Core/Inc/lcd_stm32f0.c ****     {
 502              		.loc 2 86 5 is_stmt 1 view .LVU126
  86:Core/Inc/lcd_stm32f0.c ****     {
 503              		.loc 2 86 8 is_stmt 0 view .LVU127
 504 0024 6306     		lsls	r3, r4, #25
 505 0026 48D5     		bpl	.L33
  88:Core/Inc/lcd_stm32f0.c ****     }
 506              		.loc 2 88 9 is_stmt 1 view .LVU128
  88:Core/Inc/lcd_stm32f0.c ****     }
 507              		.loc 2 88 14 is_stmt 0 view .LVU129
 508 0028 9022     		movs	r2, #144
 509 002a D205     		lsls	r2, r2, #23
 510 002c 9169     		ldr	r1, [r2, #24]
  88:Core/Inc/lcd_stm32f0.c ****     }
 511              		.loc 2 88 21 view .LVU130
 512 002e 8023     		movs	r3, #128
 513 0030 5B01     		lsls	r3, r3, #5
 514 0032 0B43     		orrs	r3, r1
 515 0034 9361     		str	r3, [r2, #24]
 516              	.L34:
  95:Core/Inc/lcd_stm32f0.c ****     {
 517              		.loc 2 95 5 is_stmt 1 view .LVU131
  95:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 18


 518              		.loc 2 95 8 is_stmt 0 view .LVU132
 519 0036 A306     		lsls	r3, r4, #26
 520 0038 47D5     		bpl	.L35
  97:Core/Inc/lcd_stm32f0.c ****     }
 521              		.loc 2 97 6 is_stmt 1 view .LVU133
  97:Core/Inc/lcd_stm32f0.c ****     }
 522              		.loc 2 97 11 is_stmt 0 view .LVU134
 523 003a 3B4A     		ldr	r2, .L48+4
 524 003c 9169     		ldr	r1, [r2, #24]
  97:Core/Inc/lcd_stm32f0.c ****     }
 525              		.loc 2 97 18 view .LVU135
 526 003e 8023     		movs	r3, #128
 527 0040 9B00     		lsls	r3, r3, #2
 528 0042 0B43     		orrs	r3, r1
 529 0044 9361     		str	r3, [r2, #24]
 530              	.L36:
 104:Core/Inc/lcd_stm32f0.c ****     {
 531              		.loc 2 104 5 is_stmt 1 view .LVU136
 104:Core/Inc/lcd_stm32f0.c ****     {
 532              		.loc 2 104 8 is_stmt 0 view .LVU137
 533 0046 E306     		lsls	r3, r4, #27
 534 0048 46D5     		bpl	.L37
 106:Core/Inc/lcd_stm32f0.c ****     }
 535              		.loc 2 106 6 is_stmt 1 view .LVU138
 106:Core/Inc/lcd_stm32f0.c ****     }
 536              		.loc 2 106 11 is_stmt 0 view .LVU139
 537 004a 374A     		ldr	r2, .L48+4
 538 004c 9169     		ldr	r1, [r2, #24]
 106:Core/Inc/lcd_stm32f0.c ****     }
 539              		.loc 2 106 18 view .LVU140
 540 004e 8023     		movs	r3, #128
 541 0050 5B00     		lsls	r3, r3, #1
 542 0052 0B43     		orrs	r3, r1
 543 0054 9361     		str	r3, [r2, #24]
 544              	.L38:
 113:Core/Inc/lcd_stm32f0.c **** 
 545              		.loc 2 113 5 is_stmt 1 view .LVU141
 546 0056 FFF7FEFF 		bl	pulse_strobe
 547              	.LVL19:
 116:Core/Inc/lcd_stm32f0.c ****     {
 548              		.loc 2 116 5 view .LVU142
 116:Core/Inc/lcd_stm32f0.c ****     {
 549              		.loc 2 116 8 is_stmt 0 view .LVU143
 550 005a 2307     		lsls	r3, r4, #28
 551 005c 43D5     		bpl	.L39
 118:Core/Inc/lcd_stm32f0.c ****     }
 552              		.loc 2 118 6 is_stmt 1 view .LVU144
 118:Core/Inc/lcd_stm32f0.c ****     }
 553              		.loc 2 118 11 is_stmt 0 view .LVU145
 554 005e 9022     		movs	r2, #144
 555 0060 D205     		lsls	r2, r2, #23
 556 0062 9169     		ldr	r1, [r2, #24]
 118:Core/Inc/lcd_stm32f0.c ****     }
 557              		.loc 2 118 18 view .LVU146
 558 0064 8023     		movs	r3, #128
 559 0066 1B02     		lsls	r3, r3, #8
 560 0068 0B43     		orrs	r3, r1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 19


 561 006a 9361     		str	r3, [r2, #24]
 562              	.L40:
 125:Core/Inc/lcd_stm32f0.c ****     {
 563              		.loc 2 125 5 is_stmt 1 view .LVU147
 125:Core/Inc/lcd_stm32f0.c ****     {
 564              		.loc 2 125 8 is_stmt 0 view .LVU148
 565 006c 6307     		lsls	r3, r4, #29
 566 006e 42D5     		bpl	.L41
 127:Core/Inc/lcd_stm32f0.c ****     }
 567              		.loc 2 127 9 is_stmt 1 view .LVU149
 127:Core/Inc/lcd_stm32f0.c ****     }
 568              		.loc 2 127 14 is_stmt 0 view .LVU150
 569 0070 9022     		movs	r2, #144
 570 0072 D205     		lsls	r2, r2, #23
 571 0074 9169     		ldr	r1, [r2, #24]
 127:Core/Inc/lcd_stm32f0.c ****     }
 572              		.loc 2 127 21 view .LVU151
 573 0076 8023     		movs	r3, #128
 574 0078 5B01     		lsls	r3, r3, #5
 575 007a 0B43     		orrs	r3, r1
 576 007c 9361     		str	r3, [r2, #24]
 577              	.L42:
 134:Core/Inc/lcd_stm32f0.c ****     {
 578              		.loc 2 134 5 is_stmt 1 view .LVU152
 134:Core/Inc/lcd_stm32f0.c ****     {
 579              		.loc 2 134 8 is_stmt 0 view .LVU153
 580 007e A307     		lsls	r3, r4, #30
 581 0080 41D5     		bpl	.L43
 136:Core/Inc/lcd_stm32f0.c ****     }
 582              		.loc 2 136 6 is_stmt 1 view .LVU154
 136:Core/Inc/lcd_stm32f0.c ****     }
 583              		.loc 2 136 11 is_stmt 0 view .LVU155
 584 0082 294A     		ldr	r2, .L48+4
 585 0084 9169     		ldr	r1, [r2, #24]
 136:Core/Inc/lcd_stm32f0.c ****     }
 586              		.loc 2 136 18 view .LVU156
 587 0086 8023     		movs	r3, #128
 588 0088 9B00     		lsls	r3, r3, #2
 589 008a 0B43     		orrs	r3, r1
 590 008c 9361     		str	r3, [r2, #24]
 591              	.L44:
 143:Core/Inc/lcd_stm32f0.c ****     {
 592              		.loc 2 143 5 is_stmt 1 view .LVU157
 143:Core/Inc/lcd_stm32f0.c ****     {
 593              		.loc 2 143 8 is_stmt 0 view .LVU158
 594 008e E407     		lsls	r4, r4, #31
 595 0090 40D5     		bpl	.L45
 145:Core/Inc/lcd_stm32f0.c ****     }
 596              		.loc 2 145 6 is_stmt 1 view .LVU159
 145:Core/Inc/lcd_stm32f0.c ****     }
 597              		.loc 2 145 11 is_stmt 0 view .LVU160
 598 0092 254A     		ldr	r2, .L48+4
 599 0094 9169     		ldr	r1, [r2, #24]
 145:Core/Inc/lcd_stm32f0.c ****     }
 600              		.loc 2 145 18 view .LVU161
 601 0096 8023     		movs	r3, #128
 602 0098 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 20


 603 009a 0B43     		orrs	r3, r1
 604 009c 9361     		str	r3, [r2, #24]
 605              	.L46:
 152:Core/Inc/lcd_stm32f0.c ****     delay(3000);
 606              		.loc 2 152 5 is_stmt 1 view .LVU162
 607 009e FFF7FEFF 		bl	pulse_strobe
 608              	.LVL20:
 153:Core/Inc/lcd_stm32f0.c **** }
 609              		.loc 2 153 5 view .LVU163
 610 00a2 2248     		ldr	r0, .L48+8
 611 00a4 FFF7FEFF 		bl	delay
 612              	.LVL21:
 154:Core/Inc/lcd_stm32f0.c **** 
 613              		.loc 2 154 1 is_stmt 0 view .LVU164
 614              		@ sp needed
 615 00a8 10BD     		pop	{r4, pc}
 616              	.LVL22:
 617              	.L47:
  79:Core/Inc/lcd_stm32f0.c ****     }
 618              		.loc 2 79 6 is_stmt 1 view .LVU165
  79:Core/Inc/lcd_stm32f0.c ****     }
 619              		.loc 2 79 11 is_stmt 0 view .LVU166
 620 00aa 9022     		movs	r2, #144
 621 00ac D205     		lsls	r2, r2, #23
 622 00ae 9169     		ldr	r1, [r2, #24]
  79:Core/Inc/lcd_stm32f0.c ****     }
 623              		.loc 2 79 18 view .LVU167
 624 00b0 8023     		movs	r3, #128
 625 00b2 1B02     		lsls	r3, r3, #8
 626 00b4 0B43     		orrs	r3, r1
 627 00b6 9361     		str	r3, [r2, #24]
 628 00b8 B4E7     		b	.L32
 629              	.L33:
  92:Core/Inc/lcd_stm32f0.c ****     }
 630              		.loc 2 92 9 is_stmt 1 view .LVU168
  92:Core/Inc/lcd_stm32f0.c ****     }
 631              		.loc 2 92 14 is_stmt 0 view .LVU169
 632 00ba 9022     		movs	r2, #144
 633 00bc D205     		lsls	r2, r2, #23
 634 00be 9169     		ldr	r1, [r2, #24]
  92:Core/Inc/lcd_stm32f0.c ****     }
 635              		.loc 2 92 21 view .LVU170
 636 00c0 8023     		movs	r3, #128
 637 00c2 5B05     		lsls	r3, r3, #21
 638 00c4 0B43     		orrs	r3, r1
 639 00c6 9361     		str	r3, [r2, #24]
 640 00c8 B5E7     		b	.L34
 641              	.L35:
 101:Core/Inc/lcd_stm32f0.c ****     }
 642              		.loc 2 101 6 is_stmt 1 view .LVU171
 101:Core/Inc/lcd_stm32f0.c ****     }
 643              		.loc 2 101 11 is_stmt 0 view .LVU172
 644 00ca 174A     		ldr	r2, .L48+4
 645 00cc 9169     		ldr	r1, [r2, #24]
 101:Core/Inc/lcd_stm32f0.c ****     }
 646              		.loc 2 101 18 view .LVU173
 647 00ce 8023     		movs	r3, #128
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 21


 648 00d0 9B04     		lsls	r3, r3, #18
 649 00d2 0B43     		orrs	r3, r1
 650 00d4 9361     		str	r3, [r2, #24]
 651 00d6 B6E7     		b	.L36
 652              	.L37:
 110:Core/Inc/lcd_stm32f0.c ****     }
 653              		.loc 2 110 6 is_stmt 1 view .LVU174
 110:Core/Inc/lcd_stm32f0.c ****     }
 654              		.loc 2 110 11 is_stmt 0 view .LVU175
 655 00d8 134A     		ldr	r2, .L48+4
 656 00da 9169     		ldr	r1, [r2, #24]
 110:Core/Inc/lcd_stm32f0.c ****     }
 657              		.loc 2 110 18 view .LVU176
 658 00dc 8023     		movs	r3, #128
 659 00de 5B04     		lsls	r3, r3, #17
 660 00e0 0B43     		orrs	r3, r1
 661 00e2 9361     		str	r3, [r2, #24]
 662 00e4 B7E7     		b	.L38
 663              	.LVL23:
 664              	.L39:
 122:Core/Inc/lcd_stm32f0.c ****     }
 665              		.loc 2 122 6 is_stmt 1 view .LVU177
 122:Core/Inc/lcd_stm32f0.c ****     }
 666              		.loc 2 122 11 is_stmt 0 view .LVU178
 667 00e6 9022     		movs	r2, #144
 668 00e8 D205     		lsls	r2, r2, #23
 669 00ea 9169     		ldr	r1, [r2, #24]
 122:Core/Inc/lcd_stm32f0.c ****     }
 670              		.loc 2 122 18 view .LVU179
 671 00ec 8023     		movs	r3, #128
 672 00ee 1B06     		lsls	r3, r3, #24
 673 00f0 0B43     		orrs	r3, r1
 674 00f2 9361     		str	r3, [r2, #24]
 675 00f4 BAE7     		b	.L40
 676              	.L41:
 131:Core/Inc/lcd_stm32f0.c ****     }
 677              		.loc 2 131 9 is_stmt 1 view .LVU180
 131:Core/Inc/lcd_stm32f0.c ****     }
 678              		.loc 2 131 14 is_stmt 0 view .LVU181
 679 00f6 9022     		movs	r2, #144
 680 00f8 D205     		lsls	r2, r2, #23
 681 00fa 9169     		ldr	r1, [r2, #24]
 131:Core/Inc/lcd_stm32f0.c ****     }
 682              		.loc 2 131 21 view .LVU182
 683 00fc 8023     		movs	r3, #128
 684 00fe 5B05     		lsls	r3, r3, #21
 685 0100 0B43     		orrs	r3, r1
 686 0102 9361     		str	r3, [r2, #24]
 687 0104 BBE7     		b	.L42
 688              	.L43:
 140:Core/Inc/lcd_stm32f0.c ****     }
 689              		.loc 2 140 6 is_stmt 1 view .LVU183
 140:Core/Inc/lcd_stm32f0.c ****     }
 690              		.loc 2 140 11 is_stmt 0 view .LVU184
 691 0106 084A     		ldr	r2, .L48+4
 692 0108 9169     		ldr	r1, [r2, #24]
 140:Core/Inc/lcd_stm32f0.c ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 22


 693              		.loc 2 140 18 view .LVU185
 694 010a 8023     		movs	r3, #128
 695 010c 9B04     		lsls	r3, r3, #18
 696 010e 0B43     		orrs	r3, r1
 697 0110 9361     		str	r3, [r2, #24]
 698 0112 BCE7     		b	.L44
 699              	.L45:
 149:Core/Inc/lcd_stm32f0.c ****     }
 700              		.loc 2 149 6 is_stmt 1 view .LVU186
 149:Core/Inc/lcd_stm32f0.c ****     }
 701              		.loc 2 149 11 is_stmt 0 view .LVU187
 702 0114 044A     		ldr	r2, .L48+4
 703 0116 9169     		ldr	r1, [r2, #24]
 149:Core/Inc/lcd_stm32f0.c ****     }
 704              		.loc 2 149 18 view .LVU188
 705 0118 8023     		movs	r3, #128
 706 011a 5B04     		lsls	r3, r3, #17
 707 011c 0B43     		orrs	r3, r1
 708 011e 9361     		str	r3, [r2, #24]
 709 0120 BDE7     		b	.L46
 710              	.L49:
 711 0122 C046     		.align	2
 712              	.L48:
 713 0124 00080048 		.word	1207961600
 714 0128 00040048 		.word	1207960576
 715 012c B80B0000 		.word	3000
 716              		.cfi_endproc
 717              	.LFE43:
 719              		.section	.text.init_LCD,"ax",%progbits
 720              		.align	1
 721              		.global	init_LCD
 722              		.syntax unified
 723              		.code	16
 724              		.thumb_func
 726              	init_LCD:
 727              	.LFB44:
 168:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 728              		.loc 2 168 1 is_stmt 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732 0000 10B5     		push	{r4, lr}
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 4, -8
 735              		.cfi_offset 14, -4
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 736              		.loc 2 169 5 view .LVU190
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 737              		.loc 2 169 8 is_stmt 0 view .LVU191
 738 0002 1B4B     		ldr	r3, .L51
 739 0004 5969     		ldr	r1, [r3, #20]
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 740              		.loc 2 169 17 view .LVU192
 741 0006 8022     		movs	r2, #128
 742 0008 9202     		lsls	r2, r2, #10
 743 000a 0A43     		orrs	r2, r1
 744 000c 5A61     		str	r2, [r3, #20]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 23


 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 745              		.loc 2 170 5 is_stmt 1 view .LVU193
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 746              		.loc 2 170 8 is_stmt 0 view .LVU194
 747 000e 5969     		ldr	r1, [r3, #20]
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 748              		.loc 2 170 17 view .LVU195
 749 0010 8022     		movs	r2, #128
 750 0012 D202     		lsls	r2, r2, #11
 751 0014 0A43     		orrs	r2, r1
 752 0016 5A61     		str	r2, [r3, #20]
 171:Core/Inc/lcd_stm32f0.c **** 
 753              		.loc 2 171 5 is_stmt 1 view .LVU196
 171:Core/Inc/lcd_stm32f0.c **** 
 754              		.loc 2 171 8 is_stmt 0 view .LVU197
 755 0018 5969     		ldr	r1, [r3, #20]
 171:Core/Inc/lcd_stm32f0.c **** 
 756              		.loc 2 171 17 view .LVU198
 757 001a 8022     		movs	r2, #128
 758 001c 1203     		lsls	r2, r2, #12
 759 001e 0A43     		orrs	r2, r1
 760 0020 5A61     		str	r2, [r3, #20]
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 761              		.loc 2 173 5 is_stmt 1 view .LVU199
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 762              		.loc 2 173 10 is_stmt 0 view .LVU200
 763 0022 9022     		movs	r2, #144
 764 0024 D205     		lsls	r2, r2, #23
 765 0026 1168     		ldr	r1, [r2]
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 766              		.loc 2 173 18 view .LVU201
 767 0028 8223     		movs	r3, #130
 768 002a DB05     		lsls	r3, r3, #23
 769 002c 0B43     		orrs	r3, r1
 770 002e 1360     		str	r3, [r2]
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 771              		.loc 2 174 5 is_stmt 1 view .LVU202
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 772              		.loc 2 174 10 is_stmt 0 view .LVU203
 773 0030 104A     		ldr	r2, .L51+4
 774 0032 1168     		ldr	r1, [r2]
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 775              		.loc 2 174 18 view .LVU204
 776 0034 A023     		movs	r3, #160
 777 0036 DB02     		lsls	r3, r3, #11
 778 0038 0B43     		orrs	r3, r1
 779 003a 1360     		str	r3, [r2]
 175:Core/Inc/lcd_stm32f0.c **** 
 780              		.loc 2 175 5 is_stmt 1 view .LVU205
 175:Core/Inc/lcd_stm32f0.c **** 
 781              		.loc 2 175 10 is_stmt 0 view .LVU206
 782 003c 0E4A     		ldr	r2, .L51+8
 783 003e 1168     		ldr	r1, [r2]
 175:Core/Inc/lcd_stm32f0.c **** 
 784              		.loc 2 175 18 view .LVU207
 785 0040 A023     		movs	r3, #160
 786 0042 DB05     		lsls	r3, r3, #23
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 24


 787 0044 0B43     		orrs	r3, r1
 788 0046 1360     		str	r3, [r2]
 177:Core/Inc/lcd_stm32f0.c **** 
 789              		.loc 2 177 5 is_stmt 1 view .LVU208
 790 0048 0C48     		ldr	r0, .L51+12
 791 004a FFF7FEFF 		bl	delay
 792              	.LVL24:
 179:Core/Inc/lcd_stm32f0.c ****     lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 793              		.loc 2 179 5 view .LVU209
 794 004e 3320     		movs	r0, #51
 795 0050 FFF7FEFF 		bl	lcd_command
 796              	.LVL25:
 180:Core/Inc/lcd_stm32f0.c ****     lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 797              		.loc 2 180 5 view .LVU210
 798 0054 3220     		movs	r0, #50
 799 0056 FFF7FEFF 		bl	lcd_command
 800              	.LVL26:
 181:Core/Inc/lcd_stm32f0.c ****     lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 801              		.loc 2 181 5 view .LVU211
 802 005a 0C20     		movs	r0, #12
 803 005c FFF7FEFF 		bl	lcd_command
 804              	.LVL27:
 182:Core/Inc/lcd_stm32f0.c ****     lcd_command(CLEAR);			// Clear display
 805              		.loc 2 182 5 view .LVU212
 806 0060 2820     		movs	r0, #40
 807 0062 FFF7FEFF 		bl	lcd_command
 808              	.LVL28:
 183:Core/Inc/lcd_stm32f0.c **** }
 809              		.loc 2 183 5 view .LVU213
 810 0066 0120     		movs	r0, #1
 811 0068 FFF7FEFF 		bl	lcd_command
 812              	.LVL29:
 184:Core/Inc/lcd_stm32f0.c **** 
 813              		.loc 2 184 1 is_stmt 0 view .LVU214
 814              		@ sp needed
 815 006c 10BD     		pop	{r4, pc}
 816              	.L52:
 817 006e C046     		.align	2
 818              	.L51:
 819 0070 00100240 		.word	1073876992
 820 0074 00040048 		.word	1207960576
 821 0078 00080048 		.word	1207961600
 822 007c 30750000 		.word	30000
 823              		.cfi_endproc
 824              	.LFE44:
 826              		.section	.text.init_GPIOA,"ax",%progbits
 827              		.align	1
 828              		.global	init_GPIOA
 829              		.syntax unified
 830              		.code	16
 831              		.thumb_func
 833              	init_GPIOA:
 834              	.LFB50:
   1:Core/Src/main.c **** //********************************************************************
   2:Core/Src/main.c **** //*              EEE3088F sensing subsytem test code                 *
   3:Core/Src/main.c **** //*==================================================================*
   4:Core/Src/main.c **** //* WRITTEN BY: Jesse Arendse   	                 		         *
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 25


   5:Core/Src/main.c **** //* DATE CREATED: 07/04/2023                                         *
   6:Core/Src/main.c **** //* MODIFIED BY: Imraan Banderker                                    *
   7:Core/Src/main.c **** //* DATE MODIFIED: 07/05/2024                                        *
   8:Core/Src/main.c **** //*==================================================================*
   9:Core/Src/main.c **** //* PROGRAMMED IN: Visual Studio Code                                *
  10:Core/Src/main.c **** //* TARGET:        STM32F0                                           *
  11:Core/Src/main.c **** //*==================================================================*
  12:Core/Src/main.c **** //* DESCRIPTION: Test sensing functionality of the sensing module    *
  13:Core/Src/main.c **** //*                                                                  *
  14:Core/Src/main.c **** //********************************************************************
  15:Core/Src/main.c **** // INCLUDE FILES
  16:Core/Src/main.c **** //====================================================================
  17:Core/Src/main.c **** #include <stdio.h>
  18:Core/Src/main.c **** #include <stdbool.h>
  19:Core/Src/main.c **** #define STM32F051
  20:Core/Src/main.c **** #include <stm32f0xx.h>
  21:Core/Src/main.c **** #include <stm32f051x8.h>
  22:Core/Src/main.c **** #include "lcd_stm32f0.c"
  23:Core/Src/main.c **** //====================================================================
  24:Core/Src/main.c **** // GLOBAL CONSTANTS
  25:Core/Src/main.c **** //====================================================================
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** //====================================================================
  28:Core/Src/main.c **** // GLOBAL VARIABLES
  29:Core/Src/main.c **** //====================================================================
  30:Core/Src/main.c **** uint16_t ADC_value_left;
  31:Core/Src/main.c **** uint16_t ADC_value_front;
  32:Core/Src/main.c **** uint16_t ADC_value_right;
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** bool holdOnFront = true;    // true: IR remains on if front wall is present, false: IR always pulse
  35:Core/Src/main.c **** bool steadyLED = true;          
  36:Core/Src/main.c **** // true: LEDs change state only when IR is present 
  37:Core/Src/main.c **** // false: LEDs turn off when IR light turns off
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** uint8_t displayADC = 6;         // choose to disply ADC value for: left=7 front=6 right=5 none=0
  40:Core/Src/main.c **** uint16_t frontThreshold = 2400;
  41:Core/Src/main.c **** uint16_t sideThreshold = 2400;
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** //====================================================================
  44:Core/Src/main.c **** // FUNCTION DECLARATIONS
  45:Core/Src/main.c **** //====================================================================
  46:Core/Src/main.c **** void init_GPIOA(void);
  47:Core/Src/main.c **** void init_GPIOB(void); 
  48:Core/Src/main.c **** void init_ADC(void); 
  49:Core/Src/main.c **** void adcLCDdisplay(uint16_t number);
  50:Core/Src/main.c **** void init_TIM14(void);
  51:Core/Src/main.c **** void TIM14_IRQHandler (void);
  52:Core/Src/main.c **** void leftLED(void);
  53:Core/Src/main.c **** void frontLED(void);
  54:Core/Src/main.c **** void rightLED(void);
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** //====================================================================
  57:Core/Src/main.c **** // MAIN FUNCTION
  58:Core/Src/main.c **** //====================================================================
  59:Core/Src/main.c **** int main(void) {
  60:Core/Src/main.c ****     init_GPIOA();
  61:Core/Src/main.c ****     init_GPIOB();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 26


  62:Core/Src/main.c ****     init_ADC();
  63:Core/Src/main.c ****     init_LCD();
  64:Core/Src/main.c ****     init_TIM14();
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** 
  67:Core/Src/main.c ****     while(1) {
  68:Core/Src/main.c ****         /*
  69:Core/Src/main.c ****             read ADC for left sensor
  70:Core/Src/main.c ****         */
  71:Core/Src/main.c ****         ADC1->CHSELR  |=  ADC_CHSELR_CHSEL0;  // select ADC channel 0(for ADC_IN0 = PA0)
  72:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
  73:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
  74:Core/Src/main.c ****         ADC_value_left = ADC1->DR;
  75:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL0;  // deselect ADC channel 0
  76:Core/Src/main.c ****         if(displayADC==7){
  77:Core/Src/main.c ****             adcLCDdisplay(ADC_value_left);      // display conversion result on the LCD
  78:Core/Src/main.c ****         }
  79:Core/Src/main.c ****         if(steadyLED){
  80:Core/Src/main.c ****             leftLED();
  81:Core/Src/main.c ****         }else{
  82:Core/Src/main.c ****             if (ADC_value_left<sideThreshold){
  83:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_7;     //turn PB7 led on
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****             }else{
  86:Core/Src/main.c ****                 GPIOB -> ODR &= ~GPIO_ODR_7;    //turn PB7 led off
  87:Core/Src/main.c ****             }
  88:Core/Src/main.c ****         }
  89:Core/Src/main.c ****         
  90:Core/Src/main.c ****         /*
  91:Core/Src/main.c ****             read ADC for front sensor
  92:Core/Src/main.c ****         */
  93:Core/Src/main.c ****         ADC1->CHSELR  |=  ADC_CHSELR_CHSEL1;  // select ADC channel 1(for ADC_IN1 = PA1)
  94:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
  95:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
  96:Core/Src/main.c ****         ADC_value_front = ADC1->DR;
  97:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL1; // deselect ADC channel 1
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****         if(displayADC==6){
 100:Core/Src/main.c ****             adcLCDdisplay(ADC_value_front);      // display conversion result on the LCD
 101:Core/Src/main.c ****         }
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****         if(steadyLED){
 104:Core/Src/main.c ****             frontLED();
 105:Core/Src/main.c ****         }else{
 106:Core/Src/main.c ****             if (ADC_value_front < frontThreshold){
 107:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_6;     //turn PB6 led on
 108:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 &= ~TIM_CR1_CEN;}    // stop counter for TIM14
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****             }else{
 111:Core/Src/main.c ****                 GPIOB -> ODR &= ~GPIO_ODR_6;    //turn PB6 led off
 112:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 |= TIM_CR1_CEN;}     //start counter for TIM14
 113:Core/Src/main.c ****             }
 114:Core/Src/main.c ****         }
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****         /*
 117:Core/Src/main.c ****             read ADC for right sensor
 118:Core/Src/main.c ****         */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 27


 119:Core/Src/main.c ****         ADC1->CHSELR  |=  ADC_CHSELR_CHSEL2;  // select ADC channel 2(for ADC_IN2 = PA2)
 120:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 121:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 122:Core/Src/main.c ****         ADC_value_right = ADC1->DR;
 123:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL2; // deselect ADC channel 2
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****         if(displayADC==5){
 126:Core/Src/main.c ****             adcLCDdisplay(ADC_value_right);      // display conversion result on the LCD
 127:Core/Src/main.c ****         }
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****         if(steadyLED){
 130:Core/Src/main.c ****             rightLED();
 131:Core/Src/main.c ****         }else{
 132:Core/Src/main.c ****             if (ADC_value_right < sideThreshold){
 133:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_5;     //turn PB5 led on
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****             }else{
 136:Core/Src/main.c ****                 GPIOB -> ODR &= ~GPIO_ODR_5;    //turn PB5 led off
 137:Core/Src/main.c ****             }
 138:Core/Src/main.c ****         }
 139:Core/Src/main.c ****                
 140:Core/Src/main.c ****     }
 141:Core/Src/main.c **** } 
 142:Core/Src/main.c **** 
 143:Core/Src/main.c **** //====================================================================
 144:Core/Src/main.c **** // FUNCTION DEFINITIONS
 145:Core/Src/main.c **** //====================================================================
 146:Core/Src/main.c **** void init_GPIOA(void) { 
 835              		.loc 1 146 23 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 147:Core/Src/main.c ****     RCC -> AHBENR |= RCC_AHBENR_GPIOAEN; // enable clock signal to Port A
 840              		.loc 1 147 5 view .LVU216
 841              		.loc 1 147 9 is_stmt 0 view .LVU217
 842 0000 0C4A     		ldr	r2, .L54
 843 0002 5169     		ldr	r1, [r2, #20]
 844              		.loc 1 147 19 view .LVU218
 845 0004 8023     		movs	r3, #128
 846 0006 9B02     		lsls	r3, r3, #10
 847 0008 0B43     		orrs	r3, r1
 848 000a 5361     		str	r3, [r2, #20]
 148:Core/Src/main.c ****     GPIOA -> MODER |= GPIO_MODER_MODER0;  // configure pin PA0 to analog input mode
 849              		.loc 1 148 5 is_stmt 1 view .LVU219
 850              		.loc 1 148 11 is_stmt 0 view .LVU220
 851 000c 9023     		movs	r3, #144
 852 000e DB05     		lsls	r3, r3, #23
 853 0010 1A68     		ldr	r2, [r3]
 854              		.loc 1 148 20 view .LVU221
 855 0012 0321     		movs	r1, #3
 856 0014 0A43     		orrs	r2, r1
 857 0016 1A60     		str	r2, [r3]
 149:Core/Src/main.c ****     GPIOA -> MODER |= GPIO_MODER_MODER1;  // configure pin PA1 to analog input mode
 858              		.loc 1 149 5 is_stmt 1 view .LVU222
 859              		.loc 1 149 11 is_stmt 0 view .LVU223
 860 0018 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 28


 861              		.loc 1 149 20 view .LVU224
 862 001a 0931     		adds	r1, r1, #9
 863 001c 0A43     		orrs	r2, r1
 864 001e 1A60     		str	r2, [r3]
 150:Core/Src/main.c ****     GPIOA -> MODER |= GPIO_MODER_MODER2;  // configure pin PA2 to analog input mode
 865              		.loc 1 150 5 is_stmt 1 view .LVU225
 866              		.loc 1 150 11 is_stmt 0 view .LVU226
 867 0020 1A68     		ldr	r2, [r3]
 868              		.loc 1 150 20 view .LVU227
 869 0022 2431     		adds	r1, r1, #36
 870 0024 0A43     		orrs	r2, r1
 871 0026 1A60     		str	r2, [r3]
 151:Core/Src/main.c ****     GPIOA -> MODER |= GPIO_MODER_MODER3_0;  // configure pin PA3 to output mode
 872              		.loc 1 151 5 is_stmt 1 view .LVU228
 873              		.loc 1 151 11 is_stmt 0 view .LVU229
 874 0028 1A68     		ldr	r2, [r3]
 875              		.loc 1 151 20 view .LVU230
 876 002a 1031     		adds	r1, r1, #16
 877 002c 0A43     		orrs	r2, r1
 878 002e 1A60     		str	r2, [r3]
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** } 
 879              		.loc 1 153 1 view .LVU231
 880              		@ sp needed
 881 0030 7047     		bx	lr
 882              	.L55:
 883 0032 C046     		.align	2
 884              	.L54:
 885 0034 00100240 		.word	1073876992
 886              		.cfi_endproc
 887              	.LFE50:
 889              		.section	.text.init_GPIOB,"ax",%progbits
 890              		.align	1
 891              		.global	init_GPIOB
 892              		.syntax unified
 893              		.code	16
 894              		.thumb_func
 896              	init_GPIOB:
 897              	.LFB51:
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** void init_GPIOB(void){
 898              		.loc 1 155 22 is_stmt 1 view -0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 0
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902              		@ link register save eliminated.
 156:Core/Src/main.c ****     RCC -> AHBENR |= RCC_AHBENR_GPIOBEN; // enable clock to GPIOB
 903              		.loc 1 156 5 view .LVU233
 904              		.loc 1 156 9 is_stmt 0 view .LVU234
 905 0000 154A     		ldr	r2, .L57
 906 0002 5169     		ldr	r1, [r2, #20]
 907              		.loc 1 156 19 view .LVU235
 908 0004 8023     		movs	r3, #128
 909 0006 DB02     		lsls	r3, r3, #11
 910 0008 0B43     		orrs	r3, r1
 911 000a 5361     		str	r3, [r2, #20]
 157:Core/Src/main.c ****     GPIOB -> MODER |= GPIO_MODER_MODER5_0;  // set PB5 to output mode
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 29


 912              		.loc 1 157 5 is_stmt 1 view .LVU236
 913              		.loc 1 157 11 is_stmt 0 view .LVU237
 914 000c 134B     		ldr	r3, .L57+4
 915 000e 1968     		ldr	r1, [r3]
 916              		.loc 1 157 20 view .LVU238
 917 0010 8022     		movs	r2, #128
 918 0012 D200     		lsls	r2, r2, #3
 919 0014 0A43     		orrs	r2, r1
 920 0016 1A60     		str	r2, [r3]
 158:Core/Src/main.c ****     GPIOB -> MODER |= GPIO_MODER_MODER6_0;  // set PB6 to output mode
 921              		.loc 1 158 5 is_stmt 1 view .LVU239
 922              		.loc 1 158 11 is_stmt 0 view .LVU240
 923 0018 1968     		ldr	r1, [r3]
 924              		.loc 1 158 20 view .LVU241
 925 001a 8022     		movs	r2, #128
 926 001c 5201     		lsls	r2, r2, #5
 927 001e 0A43     		orrs	r2, r1
 928 0020 1A60     		str	r2, [r3]
 159:Core/Src/main.c ****     GPIOB -> MODER |= GPIO_MODER_MODER7_0;  // set PB7 to output mode
 929              		.loc 1 159 5 is_stmt 1 view .LVU242
 930              		.loc 1 159 11 is_stmt 0 view .LVU243
 931 0022 1968     		ldr	r1, [r3]
 932              		.loc 1 159 20 view .LVU244
 933 0024 8022     		movs	r2, #128
 934 0026 D201     		lsls	r2, r2, #7
 935 0028 0A43     		orrs	r2, r1
 936 002a 1A60     		str	r2, [r3]
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****     GPIOB -> MODER |= GPIO_MODER_MODER10_0;  // set PB10 to output mode
 937              		.loc 1 161 5 is_stmt 1 view .LVU245
 938              		.loc 1 161 11 is_stmt 0 view .LVU246
 939 002c 1968     		ldr	r1, [r3]
 940              		.loc 1 161 20 view .LVU247
 941 002e 8022     		movs	r2, #128
 942 0030 5203     		lsls	r2, r2, #13
 943 0032 0A43     		orrs	r2, r1
 944 0034 1A60     		str	r2, [r3]
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****     GPIOB -> ODR &= ~GPIO_ODR_5;
 945              		.loc 1 163 5 is_stmt 1 view .LVU248
 946              		.loc 1 163 11 is_stmt 0 view .LVU249
 947 0036 5A69     		ldr	r2, [r3, #20]
 948              		.loc 1 163 18 view .LVU250
 949 0038 2021     		movs	r1, #32
 950 003a 8A43     		bics	r2, r1
 951 003c 5A61     		str	r2, [r3, #20]
 164:Core/Src/main.c ****     GPIOB -> ODR &= ~GPIO_ODR_6;
 952              		.loc 1 164 5 is_stmt 1 view .LVU251
 953              		.loc 1 164 11 is_stmt 0 view .LVU252
 954 003e 5A69     		ldr	r2, [r3, #20]
 955              		.loc 1 164 18 view .LVU253
 956 0040 2031     		adds	r1, r1, #32
 957 0042 8A43     		bics	r2, r1
 958 0044 5A61     		str	r2, [r3, #20]
 165:Core/Src/main.c ****     GPIOB -> ODR &= ~GPIO_ODR_7;
 959              		.loc 1 165 5 is_stmt 1 view .LVU254
 960              		.loc 1 165 11 is_stmt 0 view .LVU255
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 30


 961 0046 5A69     		ldr	r2, [r3, #20]
 962              		.loc 1 165 18 view .LVU256
 963 0048 4031     		adds	r1, r1, #64
 964 004a 8A43     		bics	r2, r1
 965 004c 5A61     		str	r2, [r3, #20]
 166:Core/Src/main.c ****     GPIOB -> ODR &= ~GPIO_ODR_10;
 966              		.loc 1 166 5 is_stmt 1 view .LVU257
 967              		.loc 1 166 11 is_stmt 0 view .LVU258
 968 004e 5A69     		ldr	r2, [r3, #20]
 969              		.loc 1 166 18 view .LVU259
 970 0050 0349     		ldr	r1, .L57+8
 971 0052 0A40     		ands	r2, r1
 972 0054 5A61     		str	r2, [r3, #20]
 167:Core/Src/main.c ****     
 168:Core/Src/main.c **** }
 973              		.loc 1 168 1 view .LVU260
 974              		@ sp needed
 975 0056 7047     		bx	lr
 976              	.L58:
 977              		.align	2
 978              	.L57:
 979 0058 00100240 		.word	1073876992
 980 005c 00040048 		.word	1207960576
 981 0060 FFFBFFFF 		.word	-1025
 982              		.cfi_endproc
 983              	.LFE51:
 985              		.section	.text.init_ADC,"ax",%progbits
 986              		.align	1
 987              		.global	init_ADC
 988              		.syntax unified
 989              		.code	16
 990              		.thumb_func
 992              	init_ADC:
 993              	.LFB52:
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** void init_ADC(void) { 
 994              		.loc 1 170 21 is_stmt 1 view -0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 0
 997              		@ frame_needed = 0, uses_anonymous_args = 0
 998 0000 10B5     		push	{r4, lr}
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 4, -8
 1001              		.cfi_offset 14, -4
 171:Core/Src/main.c ****     ADC1->CR &= ~ADC_CR_ADEN;  // ensure ADC is disabled before calibration
 1002              		.loc 1 171 5 view .LVU262
 1003              		.loc 1 171 9 is_stmt 0 view .LVU263
 1004 0002 0F4B     		ldr	r3, .L62
 1005 0004 9A68     		ldr	r2, [r3, #8]
 1006              		.loc 1 171 14 view .LVU264
 1007 0006 0121     		movs	r1, #1
 1008 0008 8A43     		bics	r2, r1
 1009 000a 9A60     		str	r2, [r3, #8]
 172:Core/Src/main.c ****     ADC1->CR |= ADC_CR_ADCAL;  // initiate ADC calibration
 1010              		.loc 1 172 5 is_stmt 1 view .LVU265
 1011              		.loc 1 172 9 is_stmt 0 view .LVU266
 1012 000c 9868     		ldr	r0, [r3, #8]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 31


 1013              		.loc 1 172 14 view .LVU267
 1014 000e 8022     		movs	r2, #128
 1015 0010 1206     		lsls	r2, r2, #24
 1016 0012 0243     		orrs	r2, r0
 1017 0014 9A60     		str	r2, [r3, #8]
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****     RCC->APB2ENR  |=  RCC_APB2ENR_ADCEN;  // connect ADC to APB clock
 1018              		.loc 1 174 5 is_stmt 1 view .LVU268
 1019              		.loc 1 174 8 is_stmt 0 view .LVU269
 1020 0016 0B48     		ldr	r0, .L62+4
 1021 0018 8469     		ldr	r4, [r0, #24]
 1022              		.loc 1 174 19 view .LVU270
 1023 001a 8022     		movs	r2, #128
 1024 001c 9200     		lsls	r2, r2, #2
 1025 001e 2243     		orrs	r2, r4
 1026 0020 8261     		str	r2, [r0, #24]
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****     ADC1->CFGR1  |= 0b0000;  // configure ADC to res of 12bits
 1027              		.loc 1 176 5 is_stmt 1 view .LVU271
 1028              		.loc 1 176 9 is_stmt 0 view .LVU272
 1029 0022 DA68     		ldr	r2, [r3, #12]
 1030              		.loc 1 176 18 view .LVU273
 1031 0024 DA60     		str	r2, [r3, #12]
 177:Core/Src/main.c ****     ADC1->CFGR1  &= ~ADC_CFGR1_CONT;  // set to single conversion mode
 1032              		.loc 1 177 5 is_stmt 1 view .LVU274
 1033              		.loc 1 177 9 is_stmt 0 view .LVU275
 1034 0026 DA68     		ldr	r2, [r3, #12]
 1035              		.loc 1 177 18 view .LVU276
 1036 0028 0748     		ldr	r0, .L62+8
 1037 002a 0240     		ands	r2, r0
 1038 002c DA60     		str	r2, [r3, #12]
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****     ADC1->CR  |=  ADC_CR_ADEN;  // enable ADC           
 1039              		.loc 1 179 5 is_stmt 1 view .LVU277
 1040              		.loc 1 179 9 is_stmt 0 view .LVU278
 1041 002e 9A68     		ldr	r2, [r3, #8]
 1042              		.loc 1 179 15 view .LVU279
 1043 0030 0A43     		orrs	r2, r1
 1044 0032 9A60     		str	r2, [r3, #8]
 180:Core/Src/main.c ****     while ( (ADC1->ISR & ADC_ISR_ADRDY) == 0 ){ }  // exit when ADC has stabilizeD
 1045              		.loc 1 180 5 is_stmt 1 view .LVU280
 1046              	.L60:
 1047              		.loc 1 180 49 discriminator 1 view .LVU281
 1048              		.loc 1 180 41 discriminator 1 view .LVU282
 1049              		.loc 1 180 18 is_stmt 0 discriminator 1 view .LVU283
 1050 0034 024B     		ldr	r3, .L62
 1051 0036 1B68     		ldr	r3, [r3]
 1052              		.loc 1 180 41 discriminator 1 view .LVU284
 1053 0038 DB07     		lsls	r3, r3, #31
 1054 003a FBD5     		bpl	.L60
 181:Core/Src/main.c **** }
 1055              		.loc 1 181 1 view .LVU285
 1056              		@ sp needed
 1057 003c 10BD     		pop	{r4, pc}
 1058              	.L63:
 1059 003e C046     		.align	2
 1060              	.L62:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 32


 1061 0040 00240140 		.word	1073816576
 1062 0044 00100240 		.word	1073876992
 1063 0048 FFDFFFFF 		.word	-8193
 1064              		.cfi_endproc
 1065              	.LFE52:
 1067              		.global	__aeabi_uidiv
 1068              		.global	__aeabi_idiv
 1069              		.section	.text.adcLCDdisplay,"ax",%progbits
 1070              		.align	1
 1071              		.global	adcLCDdisplay
 1072              		.syntax unified
 1073              		.code	16
 1074              		.thumb_func
 1076              	adcLCDdisplay:
 1077              	.LVL30:
 1078              	.LFB53:
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** void adcLCDdisplay(uint16_t number) {
 1079              		.loc 1 183 37 is_stmt 1 view -0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              		.loc 1 183 37 is_stmt 0 view .LVU287
 1084 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1085              		.cfi_def_cfa_offset 20
 1086              		.cfi_offset 4, -20
 1087              		.cfi_offset 5, -16
 1088              		.cfi_offset 6, -12
 1089              		.cfi_offset 7, -8
 1090              		.cfi_offset 14, -4
 1091 0002 C646     		mov	lr, r8
 1092 0004 00B5     		push	{lr}
 1093              		.cfi_def_cfa_offset 24
 1094              		.cfi_offset 8, -24
 1095 0006 0700     		movs	r7, r0
 184:Core/Src/main.c ****     /* for 12bit res, we expect a decimal number of up to fourdigits */
 185:Core/Src/main.c ****     uint8_t first_digit = number/1000; 
 1096              		.loc 1 185 5 is_stmt 1 view .LVU288
 1097              		.loc 1 185 13 is_stmt 0 view .LVU289
 1098 0008 FA21     		movs	r1, #250
 1099 000a 8900     		lsls	r1, r1, #2
 1100 000c FFF7FEFF 		bl	__aeabi_uidiv
 1101              	.LVL31:
 1102              		.loc 1 185 13 view .LVU290
 1103 0010 C5B2     		uxtb	r5, r0
 1104              	.LVL32:
 186:Core/Src/main.c ****     uint8_t second_digit = (number - first_digit*1000)/100;
 1105              		.loc 1 186 5 is_stmt 1 view .LVU291
 1106              		.loc 1 186 49 is_stmt 0 view .LVU292
 1107 0012 AC05     		lsls	r4, r5, #22
 1108 0014 641B     		subs	r4, r4, r5
 1109 0016 A401     		lsls	r4, r4, #6
 1110 0018 6419     		adds	r4, r4, r5
 1111 001a 6400     		lsls	r4, r4, #1
 1112 001c 6419     		adds	r4, r4, r5
 1113 001e E400     		lsls	r4, r4, #3
 1114              		.loc 1 186 36 view .LVU293
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 33


 1115 0020 3819     		adds	r0, r7, r4
 1116              		.loc 1 186 55 view .LVU294
 1117 0022 6421     		movs	r1, #100
 1118 0024 FFF7FEFF 		bl	__aeabi_idiv
 1119              	.LVL33:
 1120 0028 0300     		movs	r3, r0
 1121              		.loc 1 186 13 view .LVU295
 1122 002a C6B2     		uxtb	r6, r0
 1123              	.LVL34:
 187:Core/Src/main.c ****     uint8_t third_digit = (number - second_digit*100 - first_digit*1000)/10;
 1124              		.loc 1 187 5 is_stmt 1 view .LVU296
 1125              		.loc 1 187 49 is_stmt 0 view .LVU297
 1126 002c FF20     		movs	r0, #255
 1127 002e 1840     		ands	r0, r3
 1128 0030 4306     		lsls	r3, r0, #25
 1129 0032 1B1A     		subs	r3, r3, r0
 1130 0034 9B00     		lsls	r3, r3, #2
 1131 0036 1B18     		adds	r3, r3, r0
 1132 0038 DB00     		lsls	r3, r3, #3
 1133 003a 1B1A     		subs	r3, r3, r0
 1134 003c 9B00     		lsls	r3, r3, #2
 1135              		.loc 1 187 35 view .LVU298
 1136 003e FB18     		adds	r3, r7, r3
 1137              		.loc 1 187 54 view .LVU299
 1138 0040 E018     		adds	r0, r4, r3
 1139              		.loc 1 187 73 view .LVU300
 1140 0042 0A21     		movs	r1, #10
 1141 0044 FFF7FEFF 		bl	__aeabi_idiv
 1142              	.LVL35:
 1143              		.loc 1 187 13 view .LVU301
 1144 0048 C3B2     		uxtb	r3, r0
 1145 004a 9846     		mov	r8, r3
 1146              	.LVL36:
 188:Core/Src/main.c ****     uint8_t fourth_digit = number - third_digit*10 -second_digit*100 - first_digit*1000;
 1147              		.loc 1 188 5 is_stmt 1 view .LVU302
 1148              		.loc 1 188 52 is_stmt 0 view .LVU303
 1149 004c B300     		lsls	r3, r6, #2
 1150 004e F318     		adds	r3, r6, r3
 1151 0050 5C01     		lsls	r4, r3, #5
 1152 0052 E41A     		subs	r4, r4, r3
 1153 0054 3419     		adds	r4, r6, r4
 1154 0056 4346     		mov	r3, r8
 1155 0058 5B01     		lsls	r3, r3, #5
 1156 005a 4246     		mov	r2, r8
 1157 005c 9B1A     		subs	r3, r3, r2
 1158 005e 9B00     		lsls	r3, r3, #2
 1159 0060 9B1A     		subs	r3, r3, r2
 1160 0062 5B00     		lsls	r3, r3, #1
 1161 0064 E418     		adds	r4, r4, r3
 1162 0066 E419     		adds	r4, r4, r7
 1163 0068 E4B2     		uxtb	r4, r4
 1164              		.loc 1 188 70 view .LVU304
 1165 006a 1823     		movs	r3, #24
 1166 006c 6B43     		muls	r3, r5
 1167 006e DBB2     		uxtb	r3, r3
 1168              		.loc 1 188 13 view .LVU305
 1169 0070 E418     		adds	r4, r4, r3
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 34


 1170 0072 E4B2     		uxtb	r4, r4
 1171              	.LVL37:
 189:Core/Src/main.c ****     
 190:Core/Src/main.c ****     lcd_command(CURSOR_HOME);  // reset cursor to home 
 1172              		.loc 1 190 5 is_stmt 1 view .LVU306
 1173 0074 0220     		movs	r0, #2
 1174 0076 FFF7FEFF 		bl	lcd_command
 1175              	.LVL38:
 191:Core/Src/main.c ****     lcd_putchar(first_digit+'0');
 1176              		.loc 1 191 5 view .LVU307
 1177 007a 3035     		adds	r5, r5, #48
 1178              	.LVL39:
 1179              		.loc 1 191 5 is_stmt 0 view .LVU308
 1180 007c E8B2     		uxtb	r0, r5
 1181 007e FFF7FEFF 		bl	lcd_putchar
 1182              	.LVL40:
 192:Core/Src/main.c ****     lcd_putchar(second_digit+'0');
 1183              		.loc 1 192 5 is_stmt 1 view .LVU309
 1184 0082 3036     		adds	r6, r6, #48
 1185              	.LVL41:
 1186              		.loc 1 192 5 is_stmt 0 view .LVU310
 1187 0084 F0B2     		uxtb	r0, r6
 1188 0086 FFF7FEFF 		bl	lcd_putchar
 1189              	.LVL42:
 193:Core/Src/main.c ****     lcd_putchar(third_digit+'0');
 1190              		.loc 1 193 5 is_stmt 1 view .LVU311
 1191 008a 4046     		mov	r0, r8
 1192 008c 3030     		adds	r0, r0, #48
 1193 008e C0B2     		uxtb	r0, r0
 1194 0090 FFF7FEFF 		bl	lcd_putchar
 1195              	.LVL43:
 194:Core/Src/main.c ****     lcd_putchar(fourth_digit+'0');
 1196              		.loc 1 194 5 view .LVU312
 1197 0094 3034     		adds	r4, r4, #48
 1198              	.LVL44:
 1199              		.loc 1 194 5 is_stmt 0 view .LVU313
 1200 0096 E0B2     		uxtb	r0, r4
 1201 0098 FFF7FEFF 		bl	lcd_putchar
 1202              	.LVL45:
 195:Core/Src/main.c ****     
 196:Core/Src/main.c ****     }
 1203              		.loc 1 196 5 view .LVU314
 1204              		@ sp needed
 1205              	.LVL46:
 1206              	.LVL47:
 1207              	.LVL48:
 1208              	.LVL49:
 1209              		.loc 1 196 5 view .LVU315
 1210 009c 80BC     		pop	{r7}
 1211 009e B846     		mov	r8, r7
 1212 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1213              		.cfi_endproc
 1214              	.LFE53:
 1216              		.section	.text.init_TIM14,"ax",%progbits
 1217              		.align	1
 1218              		.global	init_TIM14
 1219              		.syntax unified
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 35


 1220              		.code	16
 1221              		.thumb_func
 1223              	init_TIM14:
 1224              	.LFB54:
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** 
 200:Core/Src/main.c **** void init_TIM14 (void){
 1225              		.loc 1 200 23 is_stmt 1 view -0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 0
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 1229              		@ link register save eliminated.
 201:Core/Src/main.c ****     RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN; // enable the clock
 1230              		.loc 1 201 5 view .LVU317
 1231              		.loc 1 201 9 is_stmt 0 view .LVU318
 1232 0000 0B4A     		ldr	r2, .L66
 1233 0002 D169     		ldr	r1, [r2, #28]
 1234              		.loc 1 201 20 view .LVU319
 1235 0004 8023     		movs	r3, #128
 1236 0006 5B00     		lsls	r3, r3, #1
 1237 0008 0B43     		orrs	r3, r1
 1238 000a D361     		str	r3, [r2, #28]
 202:Core/Src/main.c ****     TIM14 -> PSC = 122;                   //  If CLK = 8MHz, then Tov = 1s 
 1239              		.loc 1 202 5 is_stmt 1 view .LVU320
 1240              		.loc 1 202 18 is_stmt 0 view .LVU321
 1241 000c 094B     		ldr	r3, .L66+4
 1242 000e 7A22     		movs	r2, #122
 1243 0010 9A62     		str	r2, [r3, #40]
 203:Core/Src/main.c ****     TIM14 -> ARR = 65040;               // If CLK = 8MHz, then Tov = 1s
 1244              		.loc 1 203 5 is_stmt 1 view .LVU322
 1245              		.loc 1 203 18 is_stmt 0 view .LVU323
 1246 0012 094A     		ldr	r2, .L66+8
 1247 0014 DA62     		str	r2, [r3, #44]
 204:Core/Src/main.c ****     TIM14 -> DIER |= TIM_DIER_UIE;    //  enable Timer 14 interrupt
 1248              		.loc 1 204 5 is_stmt 1 view .LVU324
 1249              		.loc 1 204 11 is_stmt 0 view .LVU325
 1250 0016 DA68     		ldr	r2, [r3, #12]
 1251              		.loc 1 204 19 view .LVU326
 1252 0018 0121     		movs	r1, #1
 1253 001a 0A43     		orrs	r2, r1
 1254 001c DA60     		str	r2, [r3, #12]
 205:Core/Src/main.c ****     NVIC_EnableIRQ(TIM14_IRQn);     // unmask the TIM14 interrupt in the NVIC
 1255              		.loc 1 205 5 is_stmt 1 view .LVU327
 1256              	.LVL50:
 1257              	.LBB4:
 1258              	.LBI4:
 1259              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 36


  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 37


  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 38


 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 39


 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 40


 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 41


 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 42


 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 43


 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 44


 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 45


 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 46


 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1260              		.loc 3 623 22 view .LVU328
 1261              	.LBB5:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1262              		.loc 3 625 3 view .LVU329
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1263              		.loc 3 627 5 view .LVU330
 1264              		.loc 3 627 20 is_stmt 0 view .LVU331
 1265 001e 074A     		ldr	r2, .L66+12
 1266 0020 8020     		movs	r0, #128
 1267 0022 0003     		lsls	r0, r0, #12
 1268 0024 1060     		str	r0, [r2]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 47


 1269              	.LVL51:
 1270              		.loc 3 627 20 view .LVU332
 1271              	.LBE5:
 1272              	.LBE4:
 206:Core/Src/main.c ****     TIM14 -> CR1 |= TIM_CR1_CEN;    //  start counter for Timer 14     
 1273              		.loc 1 206 5 is_stmt 1 view .LVU333
 1274              		.loc 1 206 11 is_stmt 0 view .LVU334
 1275 0026 1A68     		ldr	r2, [r3]
 1276              		.loc 1 206 18 view .LVU335
 1277 0028 0A43     		orrs	r2, r1
 1278 002a 1A60     		str	r2, [r3]
 207:Core/Src/main.c **** }
 1279              		.loc 1 207 1 view .LVU336
 1280              		@ sp needed
 1281 002c 7047     		bx	lr
 1282              	.L67:
 1283 002e C046     		.align	2
 1284              	.L66:
 1285 0030 00100240 		.word	1073876992
 1286 0034 00200040 		.word	1073750016
 1287 0038 10FE0000 		.word	65040
 1288 003c 00E100E0 		.word	-536813312
 1289              		.cfi_endproc
 1290              	.LFE54:
 1292              		.section	.text.TIM14_IRQHandler,"ax",%progbits
 1293              		.align	1
 1294              		.global	TIM14_IRQHandler
 1295              		.syntax unified
 1296              		.code	16
 1297              		.thumb_func
 1299              	TIM14_IRQHandler:
 1300              	.LFB55:
 208:Core/Src/main.c **** 
 209:Core/Src/main.c **** void TIM14_IRQHandler (void){
 1301              		.loc 1 209 29 is_stmt 1 view -0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 1305              		@ link register save eliminated.
 210:Core/Src/main.c ****     if ((GPIOB->ODR & GPIO_ODR_10) ==0){
 1306              		.loc 1 210 5 view .LVU338
 1307              		.loc 1 210 15 is_stmt 0 view .LVU339
 1308 0000 104B     		ldr	r3, .L71
 1309 0002 5B69     		ldr	r3, [r3, #20]
 1310              		.loc 1 210 8 view .LVU340
 1311 0004 5B05     		lsls	r3, r3, #21
 1312 0006 11D4     		bmi	.L69
 211:Core/Src/main.c ****         GPIOA -> ODR |= GPIO_ODR_3;     // turn IRs on
 1313              		.loc 1 211 9 is_stmt 1 view .LVU341
 1314              		.loc 1 211 15 is_stmt 0 view .LVU342
 1315 0008 9022     		movs	r2, #144
 1316 000a D205     		lsls	r2, r2, #23
 1317 000c 5369     		ldr	r3, [r2, #20]
 1318              		.loc 1 211 22 view .LVU343
 1319 000e 0821     		movs	r1, #8
 1320 0010 0B43     		orrs	r3, r1
 1321 0012 5361     		str	r3, [r2, #20]
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 48


 212:Core/Src/main.c ****         GPIOB -> ODR |= GPIO_ODR_10;     //turn led on
 1322              		.loc 1 212 9 is_stmt 1 view .LVU344
 1323              		.loc 1 212 15 is_stmt 0 view .LVU345
 1324 0014 0B4A     		ldr	r2, .L71
 1325 0016 5169     		ldr	r1, [r2, #20]
 1326              		.loc 1 212 22 view .LVU346
 1327 0018 8023     		movs	r3, #128
 1328 001a DB00     		lsls	r3, r3, #3
 1329 001c 0B43     		orrs	r3, r1
 1330 001e 5361     		str	r3, [r2, #20]
 1331              	.L70:
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****     }else{
 215:Core/Src/main.c ****         GPIOA -> ODR &= ~GPIO_ODR_3;      // turn IRs off
 216:Core/Src/main.c ****         GPIOB -> ODR &= ~GPIO_ODR_10;    //turn led off
 217:Core/Src/main.c ****     } 
 218:Core/Src/main.c ****     TIM14 -> SR &= ~TIM_SR_UIF;  // clears the interrupt flag   
 1332              		.loc 1 218 5 is_stmt 1 view .LVU347
 1333              		.loc 1 218 11 is_stmt 0 view .LVU348
 1334 0020 094A     		ldr	r2, .L71+4
 1335 0022 1369     		ldr	r3, [r2, #16]
 1336              		.loc 1 218 17 view .LVU349
 1337 0024 0121     		movs	r1, #1
 1338 0026 8B43     		bics	r3, r1
 1339 0028 1361     		str	r3, [r2, #16]
 219:Core/Src/main.c **** }
 1340              		.loc 1 219 1 view .LVU350
 1341              		@ sp needed
 1342 002a 7047     		bx	lr
 1343              	.L69:
 215:Core/Src/main.c ****         GPIOB -> ODR &= ~GPIO_ODR_10;    //turn led off
 1344              		.loc 1 215 9 is_stmt 1 view .LVU351
 215:Core/Src/main.c ****         GPIOB -> ODR &= ~GPIO_ODR_10;    //turn led off
 1345              		.loc 1 215 15 is_stmt 0 view .LVU352
 1346 002c 9022     		movs	r2, #144
 1347 002e D205     		lsls	r2, r2, #23
 1348 0030 5369     		ldr	r3, [r2, #20]
 215:Core/Src/main.c ****         GPIOB -> ODR &= ~GPIO_ODR_10;    //turn led off
 1349              		.loc 1 215 22 view .LVU353
 1350 0032 0821     		movs	r1, #8
 1351 0034 8B43     		bics	r3, r1
 1352 0036 5361     		str	r3, [r2, #20]
 216:Core/Src/main.c ****     } 
 1353              		.loc 1 216 9 is_stmt 1 view .LVU354
 216:Core/Src/main.c ****     } 
 1354              		.loc 1 216 15 is_stmt 0 view .LVU355
 1355 0038 024A     		ldr	r2, .L71
 1356 003a 5369     		ldr	r3, [r2, #20]
 216:Core/Src/main.c ****     } 
 1357              		.loc 1 216 22 view .LVU356
 1358 003c 0349     		ldr	r1, .L71+8
 1359 003e 0B40     		ands	r3, r1
 1360 0040 5361     		str	r3, [r2, #20]
 1361 0042 EDE7     		b	.L70
 1362              	.L72:
 1363              		.align	2
 1364              	.L71:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 49


 1365 0044 00040048 		.word	1207960576
 1366 0048 00200040 		.word	1073750016
 1367 004c FFFBFFFF 		.word	-1025
 1368              		.cfi_endproc
 1369              	.LFE55:
 1371              		.section	.text.leftLED,"ax",%progbits
 1372              		.align	1
 1373              		.global	leftLED
 1374              		.syntax unified
 1375              		.code	16
 1376              		.thumb_func
 1378              	leftLED:
 1379              	.LFB56:
 220:Core/Src/main.c **** 
 221:Core/Src/main.c **** void leftLED(void){
 1380              		.loc 1 221 19 is_stmt 1 view -0
 1381              		.cfi_startproc
 1382              		@ args = 0, pretend = 0, frame = 0
 1383              		@ frame_needed = 0, uses_anonymous_args = 0
 1384              		@ link register save eliminated.
 222:Core/Src/main.c ****         if (GPIOB -> ODR & GPIO_ODR_10){
 1385              		.loc 1 222 9 view .LVU358
 1386              		.loc 1 222 19 is_stmt 0 view .LVU359
 1387 0000 0A4B     		ldr	r3, .L77
 1388 0002 5B69     		ldr	r3, [r3, #20]
 1389              		.loc 1 222 12 view .LVU360
 1390 0004 5B05     		lsls	r3, r3, #21
 1391 0006 0AD5     		bpl	.L73
 223:Core/Src/main.c ****             if (ADC_value_left < sideThreshold){
 1392              		.loc 1 223 13 is_stmt 1 view .LVU361
 1393              		.loc 1 223 32 is_stmt 0 view .LVU362
 1394 0008 094B     		ldr	r3, .L77+4
 1395 000a 1A88     		ldrh	r2, [r3]
 1396 000c 094B     		ldr	r3, .L77+8
 1397 000e 1B88     		ldrh	r3, [r3]
 1398              		.loc 1 223 16 view .LVU363
 1399 0010 9A42     		cmp	r2, r3
 1400 0012 05D2     		bcs	.L75
 224:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_7;     //turn PB7 led on
 1401              		.loc 1 224 17 is_stmt 1 view .LVU364
 1402              		.loc 1 224 23 is_stmt 0 view .LVU365
 1403 0014 054A     		ldr	r2, .L77
 1404 0016 5369     		ldr	r3, [r2, #20]
 1405              		.loc 1 224 30 view .LVU366
 1406 0018 8021     		movs	r1, #128
 1407 001a 0B43     		orrs	r3, r1
 1408 001c 5361     		str	r3, [r2, #20]
 1409              	.L73:
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****             }else{
 227:Core/Src/main.c ****                 GPIOB -> ODR &= ~GPIO_ODR_7;    //turn PB7 led off
 228:Core/Src/main.c ****             }   
 229:Core/Src/main.c ****         }
 230:Core/Src/main.c **** }
 1410              		.loc 1 230 1 view .LVU367
 1411              		@ sp needed
 1412 001e 7047     		bx	lr
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 50


 1413              	.L75:
 227:Core/Src/main.c ****             }   
 1414              		.loc 1 227 17 is_stmt 1 view .LVU368
 227:Core/Src/main.c ****             }   
 1415              		.loc 1 227 23 is_stmt 0 view .LVU369
 1416 0020 024A     		ldr	r2, .L77
 1417 0022 5369     		ldr	r3, [r2, #20]
 227:Core/Src/main.c ****             }   
 1418              		.loc 1 227 30 view .LVU370
 1419 0024 8021     		movs	r1, #128
 1420 0026 8B43     		bics	r3, r1
 1421 0028 5361     		str	r3, [r2, #20]
 1422              		.loc 1 230 1 view .LVU371
 1423 002a F8E7     		b	.L73
 1424              	.L78:
 1425              		.align	2
 1426              	.L77:
 1427 002c 00040048 		.word	1207960576
 1428 0030 00000000 		.word	ADC_value_left
 1429 0034 00000000 		.word	sideThreshold
 1430              		.cfi_endproc
 1431              	.LFE56:
 1433              		.section	.text.frontLED,"ax",%progbits
 1434              		.align	1
 1435              		.global	frontLED
 1436              		.syntax unified
 1437              		.code	16
 1438              		.thumb_func
 1440              	frontLED:
 1441              	.LFB57:
 231:Core/Src/main.c **** 
 232:Core/Src/main.c **** void frontLED(void){
 1442              		.loc 1 232 20 is_stmt 1 view -0
 1443              		.cfi_startproc
 1444              		@ args = 0, pretend = 0, frame = 0
 1445              		@ frame_needed = 0, uses_anonymous_args = 0
 1446              		@ link register save eliminated.
 233:Core/Src/main.c ****         if (GPIOB -> ODR & GPIO_ODR_10){
 1447              		.loc 1 233 9 view .LVU373
 1448              		.loc 1 233 19 is_stmt 0 view .LVU374
 1449 0000 134B     		ldr	r3, .L83
 1450 0002 5B69     		ldr	r3, [r3, #20]
 1451              		.loc 1 233 12 view .LVU375
 1452 0004 5B05     		lsls	r3, r3, #21
 1453 0006 13D5     		bpl	.L79
 234:Core/Src/main.c ****             if (ADC_value_front < frontThreshold){
 1454              		.loc 1 234 13 is_stmt 1 view .LVU376
 1455              		.loc 1 234 33 is_stmt 0 view .LVU377
 1456 0008 124B     		ldr	r3, .L83+4
 1457 000a 1A88     		ldrh	r2, [r3]
 1458 000c 124B     		ldr	r3, .L83+8
 1459 000e 1B88     		ldrh	r3, [r3]
 1460              		.loc 1 234 16 view .LVU378
 1461 0010 9A42     		cmp	r2, r3
 1462 0012 0ED2     		bcs	.L81
 235:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_6;     //turn PB6 led on
 1463              		.loc 1 235 17 is_stmt 1 view .LVU379
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 51


 1464              		.loc 1 235 23 is_stmt 0 view .LVU380
 1465 0014 0E4A     		ldr	r2, .L83
 1466 0016 5369     		ldr	r3, [r2, #20]
 1467              		.loc 1 235 30 view .LVU381
 1468 0018 4021     		movs	r1, #64
 1469 001a 0B43     		orrs	r3, r1
 1470 001c 5361     		str	r3, [r2, #20]
 236:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 &= ~TIM_CR1_CEN;}    // stop counter for TIM14
 1471              		.loc 1 236 17 is_stmt 1 view .LVU382
 1472              		.loc 1 236 20 is_stmt 0 view .LVU383
 1473 001e 0F4B     		ldr	r3, .L83+12
 1474 0020 1B78     		ldrb	r3, [r3]
 1475              		.loc 1 236 19 view .LVU384
 1476 0022 002B     		cmp	r3, #0
 1477 0024 04D0     		beq	.L79
 1478              		.loc 1 236 33 is_stmt 1 discriminator 1 view .LVU385
 1479              		.loc 1 236 39 is_stmt 0 discriminator 1 view .LVU386
 1480 0026 0E4A     		ldr	r2, .L83+16
 1481 0028 1368     		ldr	r3, [r2]
 1482              		.loc 1 236 46 discriminator 1 view .LVU387
 1483 002a 3F39     		subs	r1, r1, #63
 1484 002c 8B43     		bics	r3, r1
 1485 002e 1360     		str	r3, [r2]
 1486              	.L79:
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****             }else{
 239:Core/Src/main.c ****                 GPIOB -> ODR &= ~GPIO_ODR_6;    //turn PB6 led off
 240:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 |= TIM_CR1_CEN;}    //start counter for TIM14
 241:Core/Src/main.c ****             }   
 242:Core/Src/main.c ****         }
 243:Core/Src/main.c **** }
 1487              		.loc 1 243 1 view .LVU388
 1488              		@ sp needed
 1489 0030 7047     		bx	lr
 1490              	.L81:
 239:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 |= TIM_CR1_CEN;}    //start counter for TIM14
 1491              		.loc 1 239 17 is_stmt 1 view .LVU389
 239:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 |= TIM_CR1_CEN;}    //start counter for TIM14
 1492              		.loc 1 239 23 is_stmt 0 view .LVU390
 1493 0032 074A     		ldr	r2, .L83
 1494 0034 5369     		ldr	r3, [r2, #20]
 239:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 |= TIM_CR1_CEN;}    //start counter for TIM14
 1495              		.loc 1 239 30 view .LVU391
 1496 0036 4021     		movs	r1, #64
 1497 0038 8B43     		bics	r3, r1
 1498 003a 5361     		str	r3, [r2, #20]
 240:Core/Src/main.c ****             }   
 1499              		.loc 1 240 17 is_stmt 1 view .LVU392
 240:Core/Src/main.c ****             }   
 1500              		.loc 1 240 20 is_stmt 0 view .LVU393
 1501 003c 074B     		ldr	r3, .L83+12
 1502 003e 1B78     		ldrb	r3, [r3]
 240:Core/Src/main.c ****             }   
 1503              		.loc 1 240 19 view .LVU394
 1504 0040 002B     		cmp	r3, #0
 1505 0042 F5D0     		beq	.L79
 240:Core/Src/main.c ****             }   
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 52


 1506              		.loc 1 240 33 is_stmt 1 discriminator 1 view .LVU395
 240:Core/Src/main.c ****             }   
 1507              		.loc 1 240 39 is_stmt 0 discriminator 1 view .LVU396
 1508 0044 064A     		ldr	r2, .L83+16
 1509 0046 1368     		ldr	r3, [r2]
 240:Core/Src/main.c ****             }   
 1510              		.loc 1 240 46 discriminator 1 view .LVU397
 1511 0048 3F39     		subs	r1, r1, #63
 1512 004a 0B43     		orrs	r3, r1
 1513 004c 1360     		str	r3, [r2]
 1514              		.loc 1 243 1 discriminator 1 view .LVU398
 1515 004e EFE7     		b	.L79
 1516              	.L84:
 1517              		.align	2
 1518              	.L83:
 1519 0050 00040048 		.word	1207960576
 1520 0054 00000000 		.word	ADC_value_front
 1521 0058 00000000 		.word	frontThreshold
 1522 005c 00000000 		.word	holdOnFront
 1523 0060 00200040 		.word	1073750016
 1524              		.cfi_endproc
 1525              	.LFE57:
 1527              		.section	.text.rightLED,"ax",%progbits
 1528              		.align	1
 1529              		.global	rightLED
 1530              		.syntax unified
 1531              		.code	16
 1532              		.thumb_func
 1534              	rightLED:
 1535              	.LFB58:
 244:Core/Src/main.c **** void rightLED(void){
 1536              		.loc 1 244 20 is_stmt 1 view -0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 0
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 1540              		@ link register save eliminated.
 245:Core/Src/main.c ****         if (GPIOB -> ODR & GPIO_ODR_10){
 1541              		.loc 1 245 9 view .LVU400
 1542              		.loc 1 245 19 is_stmt 0 view .LVU401
 1543 0000 0A4B     		ldr	r3, .L89
 1544 0002 5B69     		ldr	r3, [r3, #20]
 1545              		.loc 1 245 12 view .LVU402
 1546 0004 5B05     		lsls	r3, r3, #21
 1547 0006 0AD5     		bpl	.L85
 246:Core/Src/main.c ****             if (ADC_value_right < sideThreshold){
 1548              		.loc 1 246 13 is_stmt 1 view .LVU403
 1549              		.loc 1 246 33 is_stmt 0 view .LVU404
 1550 0008 094B     		ldr	r3, .L89+4
 1551 000a 1A88     		ldrh	r2, [r3]
 1552 000c 094B     		ldr	r3, .L89+8
 1553 000e 1B88     		ldrh	r3, [r3]
 1554              		.loc 1 246 16 view .LVU405
 1555 0010 9A42     		cmp	r2, r3
 1556 0012 05D2     		bcs	.L87
 247:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_5;     //turn PB5 led on
 1557              		.loc 1 247 17 is_stmt 1 view .LVU406
 1558              		.loc 1 247 23 is_stmt 0 view .LVU407
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 53


 1559 0014 054A     		ldr	r2, .L89
 1560 0016 5369     		ldr	r3, [r2, #20]
 1561              		.loc 1 247 30 view .LVU408
 1562 0018 2021     		movs	r1, #32
 1563 001a 0B43     		orrs	r3, r1
 1564 001c 5361     		str	r3, [r2, #20]
 1565              	.L85:
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****             }else{
 250:Core/Src/main.c ****                 GPIOB -> ODR &= ~GPIO_ODR_5;    //turn PB5 led off
 251:Core/Src/main.c ****             }   
 252:Core/Src/main.c ****         }
 253:Core/Src/main.c **** }
 1566              		.loc 1 253 1 view .LVU409
 1567              		@ sp needed
 1568 001e 7047     		bx	lr
 1569              	.L87:
 250:Core/Src/main.c ****             }   
 1570              		.loc 1 250 17 is_stmt 1 view .LVU410
 250:Core/Src/main.c ****             }   
 1571              		.loc 1 250 23 is_stmt 0 view .LVU411
 1572 0020 024A     		ldr	r2, .L89
 1573 0022 5369     		ldr	r3, [r2, #20]
 250:Core/Src/main.c ****             }   
 1574              		.loc 1 250 30 view .LVU412
 1575 0024 2021     		movs	r1, #32
 1576 0026 8B43     		bics	r3, r1
 1577 0028 5361     		str	r3, [r2, #20]
 1578              		.loc 1 253 1 view .LVU413
 1579 002a F8E7     		b	.L85
 1580              	.L90:
 1581              		.align	2
 1582              	.L89:
 1583 002c 00040048 		.word	1207960576
 1584 0030 00000000 		.word	ADC_value_right
 1585 0034 00000000 		.word	sideThreshold
 1586              		.cfi_endproc
 1587              	.LFE58:
 1589              		.section	.text.main,"ax",%progbits
 1590              		.align	1
 1591              		.global	main
 1592              		.syntax unified
 1593              		.code	16
 1594              		.thumb_func
 1596              	main:
 1597              	.LFB49:
  59:Core/Src/main.c ****     init_GPIOA();
 1598              		.loc 1 59 16 is_stmt 1 view -0
 1599              		.cfi_startproc
 1600              		@ Volatile: function does not return.
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603 0000 10B5     		push	{r4, lr}
 1604              		.cfi_def_cfa_offset 8
 1605              		.cfi_offset 4, -8
 1606              		.cfi_offset 14, -4
  60:Core/Src/main.c ****     init_GPIOB();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 54


 1607              		.loc 1 60 5 view .LVU415
 1608 0002 FFF7FEFF 		bl	init_GPIOA
 1609              	.LVL52:
  61:Core/Src/main.c ****     init_ADC();
 1610              		.loc 1 61 5 view .LVU416
 1611 0006 FFF7FEFF 		bl	init_GPIOB
 1612              	.LVL53:
  62:Core/Src/main.c ****     init_LCD();
 1613              		.loc 1 62 5 view .LVU417
 1614 000a FFF7FEFF 		bl	init_ADC
 1615              	.LVL54:
  63:Core/Src/main.c ****     init_TIM14();
 1616              		.loc 1 63 5 view .LVU418
 1617 000e FFF7FEFF 		bl	init_LCD
 1618              	.LVL55:
  64:Core/Src/main.c **** 
 1619              		.loc 1 64 5 view .LVU419
 1620 0012 FFF7FEFF 		bl	init_TIM14
 1621              	.LVL56:
 1622 0016 2FE0     		b	.L92
 1623              	.L112:
  77:Core/Src/main.c ****         }
 1624              		.loc 1 77 13 view .LVU420
 1625 0018 FFF7FEFF 		bl	adcLCDdisplay
 1626              	.LVL57:
 1627 001c 46E0     		b	.L94
 1628              	.L113:
  80:Core/Src/main.c ****         }else{
 1629              		.loc 1 80 13 view .LVU421
 1630 001e FFF7FEFF 		bl	leftLED
 1631              	.LVL58:
 1632 0022 52E0     		b	.L96
 1633              	.L97:
  86:Core/Src/main.c ****             }
 1634              		.loc 1 86 17 view .LVU422
  86:Core/Src/main.c ****             }
 1635              		.loc 1 86 23 is_stmt 0 view .LVU423
 1636 0024 554A     		ldr	r2, .L116
 1637 0026 5369     		ldr	r3, [r2, #20]
  86:Core/Src/main.c ****             }
 1638              		.loc 1 86 30 view .LVU424
 1639 0028 8021     		movs	r1, #128
 1640 002a 8B43     		bics	r3, r1
 1641 002c 5361     		str	r3, [r2, #20]
 1642 002e 4CE0     		b	.L96
 1643              	.L114:
 100:Core/Src/main.c ****         }
 1644              		.loc 1 100 13 is_stmt 1 view .LVU425
 1645 0030 FFF7FEFF 		bl	adcLCDdisplay
 1646              	.LVL59:
 1647 0034 63E0     		b	.L99
 1648              	.L115:
 104:Core/Src/main.c ****         }else{
 1649              		.loc 1 104 13 view .LVU426
 1650 0036 FFF7FEFF 		bl	frontLED
 1651              	.LVL60:
 1652              	.L101:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 55


 119:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1653              		.loc 1 119 9 view .LVU427
 119:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1654              		.loc 1 119 13 is_stmt 0 view .LVU428
 1655 003a 514B     		ldr	r3, .L116+4
 1656 003c 9A6A     		ldr	r2, [r3, #40]
 119:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1657              		.loc 1 119 23 view .LVU429
 1658 003e 0421     		movs	r1, #4
 1659 0040 0A43     		orrs	r2, r1
 1660 0042 9A62     		str	r2, [r3, #40]
 120:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1661              		.loc 1 120 9 is_stmt 1 view .LVU430
 120:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1662              		.loc 1 120 13 is_stmt 0 view .LVU431
 1663 0044 9A68     		ldr	r2, [r3, #8]
 120:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1664              		.loc 1 120 19 view .LVU432
 1665 0046 0A43     		orrs	r2, r1
 1666 0048 9A60     		str	r2, [r3, #8]
 121:Core/Src/main.c ****         ADC_value_right = ADC1->DR;
 1667              		.loc 1 121 9 is_stmt 1 view .LVU433
 1668              	.L103:
 121:Core/Src/main.c ****         ADC_value_right = ADC1->DR;
 1669              		.loc 1 121 42 discriminator 1 view .LVU434
 121:Core/Src/main.c ****         ADC_value_right = ADC1->DR;
 1670              		.loc 1 121 21 is_stmt 0 discriminator 1 view .LVU435
 1671 004a 4D4B     		ldr	r3, .L116+4
 1672 004c 1B68     		ldr	r3, [r3]
 121:Core/Src/main.c ****         ADC_value_right = ADC1->DR;
 1673              		.loc 1 121 42 discriminator 1 view .LVU436
 1674 004e 5B07     		lsls	r3, r3, #29
 1675 0050 FBD5     		bpl	.L103
 122:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL2; // deselect ADC channel 2
 1676              		.loc 1 122 9 is_stmt 1 view .LVU437
 122:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL2; // deselect ADC channel 2
 1677              		.loc 1 122 31 is_stmt 0 view .LVU438
 1678 0052 4B4B     		ldr	r3, .L116+4
 1679 0054 186C     		ldr	r0, [r3, #64]
 122:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL2; // deselect ADC channel 2
 1680              		.loc 1 122 25 view .LVU439
 1681 0056 80B2     		uxth	r0, r0
 1682 0058 4A4A     		ldr	r2, .L116+8
 1683 005a 1080     		strh	r0, [r2]
 123:Core/Src/main.c **** 
 1684              		.loc 1 123 9 is_stmt 1 view .LVU440
 123:Core/Src/main.c **** 
 1685              		.loc 1 123 13 is_stmt 0 view .LVU441
 1686 005c 9A6A     		ldr	r2, [r3, #40]
 123:Core/Src/main.c **** 
 1687              		.loc 1 123 23 view .LVU442
 1688 005e 0421     		movs	r1, #4
 1689 0060 8A43     		bics	r2, r1
 1690 0062 9A62     		str	r2, [r3, #40]
 125:Core/Src/main.c ****             adcLCDdisplay(ADC_value_right);      // display conversion result on the LCD
 1691              		.loc 1 125 9 is_stmt 1 view .LVU443
 125:Core/Src/main.c ****             adcLCDdisplay(ADC_value_right);      // display conversion result on the LCD
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 56


 1692              		.loc 1 125 22 is_stmt 0 view .LVU444
 1693 0064 484B     		ldr	r3, .L116+12
 1694 0066 1B78     		ldrb	r3, [r3]
 125:Core/Src/main.c ****             adcLCDdisplay(ADC_value_right);      // display conversion result on the LCD
 1695              		.loc 1 125 11 view .LVU445
 1696 0068 052B     		cmp	r3, #5
 1697 006a 71D0     		beq	.L111
 1698              	.L104:
 129:Core/Src/main.c ****             rightLED();
 1699              		.loc 1 129 9 is_stmt 1 view .LVU446
 129:Core/Src/main.c ****             rightLED();
 1700              		.loc 1 129 12 is_stmt 0 view .LVU447
 1701 006c 474B     		ldr	r3, .L116+16
 1702 006e 1B78     		ldrb	r3, [r3]
 129:Core/Src/main.c ****             rightLED();
 1703              		.loc 1 129 11 view .LVU448
 1704 0070 002B     		cmp	r3, #0
 1705 0072 70D0     		beq	.L105
 130:Core/Src/main.c ****         }else{
 1706              		.loc 1 130 13 is_stmt 1 view .LVU449
 1707 0074 FFF7FEFF 		bl	rightLED
 1708              	.LVL61:
 1709              	.L92:
  67:Core/Src/main.c ****         /*
 1710              		.loc 1 67 5 view .LVU450
  71:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1711              		.loc 1 71 9 view .LVU451
  71:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1712              		.loc 1 71 13 is_stmt 0 view .LVU452
 1713 0078 414B     		ldr	r3, .L116+4
 1714 007a 9A6A     		ldr	r2, [r3, #40]
  71:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1715              		.loc 1 71 23 view .LVU453
 1716 007c 0121     		movs	r1, #1
 1717 007e 0A43     		orrs	r2, r1
 1718 0080 9A62     		str	r2, [r3, #40]
  72:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1719              		.loc 1 72 9 is_stmt 1 view .LVU454
  72:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1720              		.loc 1 72 13 is_stmt 0 view .LVU455
 1721 0082 9A68     		ldr	r2, [r3, #8]
  72:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1722              		.loc 1 72 19 view .LVU456
 1723 0084 0331     		adds	r1, r1, #3
 1724 0086 0A43     		orrs	r2, r1
 1725 0088 9A60     		str	r2, [r3, #8]
  73:Core/Src/main.c ****         ADC_value_left = ADC1->DR;
 1726              		.loc 1 73 9 is_stmt 1 view .LVU457
 1727              	.L93:
  73:Core/Src/main.c ****         ADC_value_left = ADC1->DR;
 1728              		.loc 1 73 42 discriminator 1 view .LVU458
  73:Core/Src/main.c ****         ADC_value_left = ADC1->DR;
 1729              		.loc 1 73 21 is_stmt 0 discriminator 1 view .LVU459
 1730 008a 3D4B     		ldr	r3, .L116+4
 1731 008c 1B68     		ldr	r3, [r3]
  73:Core/Src/main.c ****         ADC_value_left = ADC1->DR;
 1732              		.loc 1 73 42 discriminator 1 view .LVU460
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 57


 1733 008e 5B07     		lsls	r3, r3, #29
 1734 0090 FBD5     		bpl	.L93
  74:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL0;  // deselect ADC channel 0
 1735              		.loc 1 74 9 is_stmt 1 view .LVU461
  74:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL0;  // deselect ADC channel 0
 1736              		.loc 1 74 30 is_stmt 0 view .LVU462
 1737 0092 3B4B     		ldr	r3, .L116+4
 1738 0094 186C     		ldr	r0, [r3, #64]
  74:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL0;  // deselect ADC channel 0
 1739              		.loc 1 74 24 view .LVU463
 1740 0096 80B2     		uxth	r0, r0
 1741 0098 3D4A     		ldr	r2, .L116+20
 1742 009a 1080     		strh	r0, [r2]
  75:Core/Src/main.c ****         if(displayADC==7){
 1743              		.loc 1 75 9 is_stmt 1 view .LVU464
  75:Core/Src/main.c ****         if(displayADC==7){
 1744              		.loc 1 75 13 is_stmt 0 view .LVU465
 1745 009c 9A6A     		ldr	r2, [r3, #40]
  75:Core/Src/main.c ****         if(displayADC==7){
 1746              		.loc 1 75 23 view .LVU466
 1747 009e 0121     		movs	r1, #1
 1748 00a0 8A43     		bics	r2, r1
 1749 00a2 9A62     		str	r2, [r3, #40]
  76:Core/Src/main.c ****             adcLCDdisplay(ADC_value_left);      // display conversion result on the LCD
 1750              		.loc 1 76 9 is_stmt 1 view .LVU467
  76:Core/Src/main.c ****             adcLCDdisplay(ADC_value_left);      // display conversion result on the LCD
 1751              		.loc 1 76 22 is_stmt 0 view .LVU468
 1752 00a4 384B     		ldr	r3, .L116+12
 1753 00a6 1B78     		ldrb	r3, [r3]
  76:Core/Src/main.c ****             adcLCDdisplay(ADC_value_left);      // display conversion result on the LCD
 1754              		.loc 1 76 11 view .LVU469
 1755 00a8 072B     		cmp	r3, #7
 1756 00aa B5D0     		beq	.L112
 1757              	.L94:
  79:Core/Src/main.c ****             leftLED();
 1758              		.loc 1 79 9 is_stmt 1 view .LVU470
  79:Core/Src/main.c ****             leftLED();
 1759              		.loc 1 79 12 is_stmt 0 view .LVU471
 1760 00ac 374B     		ldr	r3, .L116+16
 1761 00ae 1B78     		ldrb	r3, [r3]
  79:Core/Src/main.c ****             leftLED();
 1762              		.loc 1 79 11 view .LVU472
 1763 00b0 002B     		cmp	r3, #0
 1764 00b2 B4D1     		bne	.L113
  82:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_7;     //turn PB7 led on
 1765              		.loc 1 82 13 is_stmt 1 view .LVU473
  82:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_7;     //turn PB7 led on
 1766              		.loc 1 82 31 is_stmt 0 view .LVU474
 1767 00b4 364B     		ldr	r3, .L116+20
 1768 00b6 1A88     		ldrh	r2, [r3]
 1769 00b8 364B     		ldr	r3, .L116+24
 1770 00ba 1B88     		ldrh	r3, [r3]
  82:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_7;     //turn PB7 led on
 1771              		.loc 1 82 16 view .LVU475
 1772 00bc 9A42     		cmp	r2, r3
 1773 00be B1D2     		bcs	.L97
  83:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 58


 1774              		.loc 1 83 17 is_stmt 1 view .LVU476
  83:Core/Src/main.c **** 
 1775              		.loc 1 83 23 is_stmt 0 view .LVU477
 1776 00c0 2E4A     		ldr	r2, .L116
 1777 00c2 5369     		ldr	r3, [r2, #20]
  83:Core/Src/main.c **** 
 1778              		.loc 1 83 30 view .LVU478
 1779 00c4 8021     		movs	r1, #128
 1780 00c6 0B43     		orrs	r3, r1
 1781 00c8 5361     		str	r3, [r2, #20]
 1782              	.L96:
  93:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1783              		.loc 1 93 9 is_stmt 1 view .LVU479
  93:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1784              		.loc 1 93 13 is_stmt 0 view .LVU480
 1785 00ca 2D4B     		ldr	r3, .L116+4
 1786 00cc 9A6A     		ldr	r2, [r3, #40]
  93:Core/Src/main.c ****         ADC1->CR  |=  ADC_CR_ADSTART;  // start conversion
 1787              		.loc 1 93 23 view .LVU481
 1788 00ce 0221     		movs	r1, #2
 1789 00d0 0A43     		orrs	r2, r1
 1790 00d2 9A62     		str	r2, [r3, #40]
  94:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1791              		.loc 1 94 9 is_stmt 1 view .LVU482
  94:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1792              		.loc 1 94 13 is_stmt 0 view .LVU483
 1793 00d4 9A68     		ldr	r2, [r3, #8]
  94:Core/Src/main.c ****         while( (ADC1->ISR & ADC_ISR_EOC) == 0 );  // wait until conversion is complete
 1794              		.loc 1 94 19 view .LVU484
 1795 00d6 0231     		adds	r1, r1, #2
 1796 00d8 0A43     		orrs	r2, r1
 1797 00da 9A60     		str	r2, [r3, #8]
  95:Core/Src/main.c ****         ADC_value_front = ADC1->DR;
 1798              		.loc 1 95 9 is_stmt 1 view .LVU485
 1799              	.L98:
  95:Core/Src/main.c ****         ADC_value_front = ADC1->DR;
 1800              		.loc 1 95 42 discriminator 1 view .LVU486
  95:Core/Src/main.c ****         ADC_value_front = ADC1->DR;
 1801              		.loc 1 95 21 is_stmt 0 discriminator 1 view .LVU487
 1802 00dc 284B     		ldr	r3, .L116+4
 1803 00de 1B68     		ldr	r3, [r3]
  95:Core/Src/main.c ****         ADC_value_front = ADC1->DR;
 1804              		.loc 1 95 42 discriminator 1 view .LVU488
 1805 00e0 5B07     		lsls	r3, r3, #29
 1806 00e2 FBD5     		bpl	.L98
  96:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL1; // deselect ADC channel 1
 1807              		.loc 1 96 9 is_stmt 1 view .LVU489
  96:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL1; // deselect ADC channel 1
 1808              		.loc 1 96 31 is_stmt 0 view .LVU490
 1809 00e4 264B     		ldr	r3, .L116+4
 1810 00e6 186C     		ldr	r0, [r3, #64]
  96:Core/Src/main.c ****         ADC1->CHSELR  &= ~ADC_CHSELR_CHSEL1; // deselect ADC channel 1
 1811              		.loc 1 96 25 view .LVU491
 1812 00e8 80B2     		uxth	r0, r0
 1813 00ea 2B4A     		ldr	r2, .L116+28
 1814 00ec 1080     		strh	r0, [r2]
  97:Core/Src/main.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 59


 1815              		.loc 1 97 9 is_stmt 1 view .LVU492
  97:Core/Src/main.c **** 
 1816              		.loc 1 97 13 is_stmt 0 view .LVU493
 1817 00ee 9A6A     		ldr	r2, [r3, #40]
  97:Core/Src/main.c **** 
 1818              		.loc 1 97 23 view .LVU494
 1819 00f0 0221     		movs	r1, #2
 1820 00f2 8A43     		bics	r2, r1
 1821 00f4 9A62     		str	r2, [r3, #40]
  99:Core/Src/main.c ****             adcLCDdisplay(ADC_value_front);      // display conversion result on the LCD
 1822              		.loc 1 99 9 is_stmt 1 view .LVU495
  99:Core/Src/main.c ****             adcLCDdisplay(ADC_value_front);      // display conversion result on the LCD
 1823              		.loc 1 99 22 is_stmt 0 view .LVU496
 1824 00f6 244B     		ldr	r3, .L116+12
 1825 00f8 1B78     		ldrb	r3, [r3]
  99:Core/Src/main.c ****             adcLCDdisplay(ADC_value_front);      // display conversion result on the LCD
 1826              		.loc 1 99 11 view .LVU497
 1827 00fa 062B     		cmp	r3, #6
 1828 00fc 98D0     		beq	.L114
 1829              	.L99:
 103:Core/Src/main.c ****             frontLED();
 1830              		.loc 1 103 9 is_stmt 1 view .LVU498
 103:Core/Src/main.c ****             frontLED();
 1831              		.loc 1 103 12 is_stmt 0 view .LVU499
 1832 00fe 234B     		ldr	r3, .L116+16
 1833 0100 1B78     		ldrb	r3, [r3]
 103:Core/Src/main.c ****             frontLED();
 1834              		.loc 1 103 11 view .LVU500
 1835 0102 002B     		cmp	r3, #0
 1836 0104 97D1     		bne	.L115
 106:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_6;     //turn PB6 led on
 1837              		.loc 1 106 13 is_stmt 1 view .LVU501
 106:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_6;     //turn PB6 led on
 1838              		.loc 1 106 33 is_stmt 0 view .LVU502
 1839 0106 244B     		ldr	r3, .L116+28
 1840 0108 1A88     		ldrh	r2, [r3]
 1841 010a 244B     		ldr	r3, .L116+32
 1842 010c 1B88     		ldrh	r3, [r3]
 106:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_6;     //turn PB6 led on
 1843              		.loc 1 106 16 view .LVU503
 1844 010e 9A42     		cmp	r2, r3
 1845 0110 0ED2     		bcs	.L102
 107:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 &= ~TIM_CR1_CEN;}    // stop counter for TIM14
 1846              		.loc 1 107 17 is_stmt 1 view .LVU504
 107:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 &= ~TIM_CR1_CEN;}    // stop counter for TIM14
 1847              		.loc 1 107 23 is_stmt 0 view .LVU505
 1848 0112 1A4A     		ldr	r2, .L116
 1849 0114 5369     		ldr	r3, [r2, #20]
 107:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 &= ~TIM_CR1_CEN;}    // stop counter for TIM14
 1850              		.loc 1 107 30 view .LVU506
 1851 0116 4021     		movs	r1, #64
 1852 0118 0B43     		orrs	r3, r1
 1853 011a 5361     		str	r3, [r2, #20]
 108:Core/Src/main.c **** 
 1854              		.loc 1 108 17 is_stmt 1 view .LVU507
 108:Core/Src/main.c **** 
 1855              		.loc 1 108 20 is_stmt 0 view .LVU508
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 60


 1856 011c 204B     		ldr	r3, .L116+36
 1857 011e 1B78     		ldrb	r3, [r3]
 108:Core/Src/main.c **** 
 1858              		.loc 1 108 19 view .LVU509
 1859 0120 002B     		cmp	r3, #0
 1860 0122 8AD0     		beq	.L101
 108:Core/Src/main.c **** 
 1861              		.loc 1 108 33 is_stmt 1 discriminator 1 view .LVU510
 108:Core/Src/main.c **** 
 1862              		.loc 1 108 39 is_stmt 0 discriminator 1 view .LVU511
 1863 0124 1F4A     		ldr	r2, .L116+40
 1864 0126 1368     		ldr	r3, [r2]
 108:Core/Src/main.c **** 
 1865              		.loc 1 108 46 discriminator 1 view .LVU512
 1866 0128 3F39     		subs	r1, r1, #63
 1867 012a 8B43     		bics	r3, r1
 1868 012c 1360     		str	r3, [r2]
 1869 012e 84E7     		b	.L101
 1870              	.L102:
 111:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 |= TIM_CR1_CEN;}     //start counter for TIM14
 1871              		.loc 1 111 17 is_stmt 1 view .LVU513
 111:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 |= TIM_CR1_CEN;}     //start counter for TIM14
 1872              		.loc 1 111 23 is_stmt 0 view .LVU514
 1873 0130 124A     		ldr	r2, .L116
 1874 0132 5369     		ldr	r3, [r2, #20]
 111:Core/Src/main.c ****                 if(holdOnFront){TIM14 -> CR1 |= TIM_CR1_CEN;}     //start counter for TIM14
 1875              		.loc 1 111 30 view .LVU515
 1876 0134 4021     		movs	r1, #64
 1877 0136 8B43     		bics	r3, r1
 1878 0138 5361     		str	r3, [r2, #20]
 112:Core/Src/main.c ****             }
 1879              		.loc 1 112 17 is_stmt 1 view .LVU516
 112:Core/Src/main.c ****             }
 1880              		.loc 1 112 20 is_stmt 0 view .LVU517
 1881 013a 194B     		ldr	r3, .L116+36
 1882 013c 1B78     		ldrb	r3, [r3]
 112:Core/Src/main.c ****             }
 1883              		.loc 1 112 19 view .LVU518
 1884 013e 002B     		cmp	r3, #0
 1885 0140 00D1     		bne	.LCB1556
 1886 0142 7AE7     		b	.L101	@long jump
 1887              	.LCB1556:
 112:Core/Src/main.c ****             }
 1888              		.loc 1 112 33 is_stmt 1 discriminator 1 view .LVU519
 112:Core/Src/main.c ****             }
 1889              		.loc 1 112 39 is_stmt 0 discriminator 1 view .LVU520
 1890 0144 174A     		ldr	r2, .L116+40
 1891 0146 1368     		ldr	r3, [r2]
 112:Core/Src/main.c ****             }
 1892              		.loc 1 112 46 discriminator 1 view .LVU521
 1893 0148 3F39     		subs	r1, r1, #63
 1894 014a 0B43     		orrs	r3, r1
 1895 014c 1360     		str	r3, [r2]
 1896 014e 74E7     		b	.L101
 1897              	.L111:
 126:Core/Src/main.c ****         }
 1898              		.loc 1 126 13 is_stmt 1 view .LVU522
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 61


 1899 0150 FFF7FEFF 		bl	adcLCDdisplay
 1900              	.LVL62:
 1901 0154 8AE7     		b	.L104
 1902              	.L105:
 132:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_5;     //turn PB5 led on
 1903              		.loc 1 132 13 view .LVU523
 132:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_5;     //turn PB5 led on
 1904              		.loc 1 132 33 is_stmt 0 view .LVU524
 1905 0156 0B4B     		ldr	r3, .L116+8
 1906 0158 1A88     		ldrh	r2, [r3]
 1907 015a 0E4B     		ldr	r3, .L116+24
 1908 015c 1B88     		ldrh	r3, [r3]
 132:Core/Src/main.c ****                 GPIOB -> ODR |= GPIO_ODR_5;     //turn PB5 led on
 1909              		.loc 1 132 16 view .LVU525
 1910 015e 9A42     		cmp	r2, r3
 1911 0160 05D2     		bcs	.L107
 133:Core/Src/main.c **** 
 1912              		.loc 1 133 17 is_stmt 1 view .LVU526
 133:Core/Src/main.c **** 
 1913              		.loc 1 133 23 is_stmt 0 view .LVU527
 1914 0162 064A     		ldr	r2, .L116
 1915 0164 5369     		ldr	r3, [r2, #20]
 133:Core/Src/main.c **** 
 1916              		.loc 1 133 30 view .LVU528
 1917 0166 2021     		movs	r1, #32
 1918 0168 0B43     		orrs	r3, r1
 1919 016a 5361     		str	r3, [r2, #20]
 1920 016c 84E7     		b	.L92
 1921              	.L107:
 136:Core/Src/main.c ****             }
 1922              		.loc 1 136 17 is_stmt 1 view .LVU529
 136:Core/Src/main.c ****             }
 1923              		.loc 1 136 23 is_stmt 0 view .LVU530
 1924 016e 034A     		ldr	r2, .L116
 1925 0170 5369     		ldr	r3, [r2, #20]
 136:Core/Src/main.c ****             }
 1926              		.loc 1 136 30 view .LVU531
 1927 0172 2021     		movs	r1, #32
 1928 0174 8B43     		bics	r3, r1
 1929 0176 5361     		str	r3, [r2, #20]
 1930 0178 7EE7     		b	.L92
 1931              	.L117:
 1932 017a C046     		.align	2
 1933              	.L116:
 1934 017c 00040048 		.word	1207960576
 1935 0180 00240140 		.word	1073816576
 1936 0184 00000000 		.word	ADC_value_right
 1937 0188 00000000 		.word	displayADC
 1938 018c 00000000 		.word	steadyLED
 1939 0190 00000000 		.word	ADC_value_left
 1940 0194 00000000 		.word	sideThreshold
 1941 0198 00000000 		.word	ADC_value_front
 1942 019c 00000000 		.word	frontThreshold
 1943 01a0 00000000 		.word	holdOnFront
 1944 01a4 00200040 		.word	1073750016
 1945              		.cfi_endproc
 1946              	.LFE49:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 62


 1948              		.global	sideThreshold
 1949              		.section	.data.sideThreshold,"aw"
 1950              		.align	1
 1953              	sideThreshold:
 1954 0000 6009     		.short	2400
 1955              		.global	frontThreshold
 1956              		.section	.data.frontThreshold,"aw"
 1957              		.align	1
 1960              	frontThreshold:
 1961 0000 6009     		.short	2400
 1962              		.global	displayADC
 1963              		.section	.data.displayADC,"aw"
 1966              	displayADC:
 1967 0000 06       		.byte	6
 1968              		.global	steadyLED
 1969              		.section	.data.steadyLED,"aw"
 1972              	steadyLED:
 1973 0000 01       		.byte	1
 1974              		.global	holdOnFront
 1975              		.section	.data.holdOnFront,"aw"
 1978              	holdOnFront:
 1979 0000 01       		.byte	1
 1980              		.global	ADC_value_right
 1981              		.section	.bss.ADC_value_right,"aw",%nobits
 1982              		.align	1
 1985              	ADC_value_right:
 1986 0000 0000     		.space	2
 1987              		.global	ADC_value_front
 1988              		.section	.bss.ADC_value_front,"aw",%nobits
 1989              		.align	1
 1992              	ADC_value_front:
 1993 0000 0000     		.space	2
 1994              		.global	ADC_value_left
 1995              		.section	.bss.ADC_value_left,"aw",%nobits
 1996              		.align	1
 1999              	ADC_value_left:
 2000 0000 0000     		.space	2
 2001              		.text
 2002              	.Letext0:
 2003              		.file 4 "c:\\users\\user\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@xpac
 2004              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 2005              		.file 6 "c:\\users\\user\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@xpac
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:19     .text.delay:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:25     .text.delay:0000000000000000 delay
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:78     .text.pulse_strobe:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:84     .text.pulse_strobe:0000000000000000 pulse_strobe
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:137    .text.pulse_strobe:0000000000000034 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:142    .text.lcd_putchar:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:148    .text.lcd_putchar:0000000000000000 lcd_putchar
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:394    .text.lcd_putchar:000000000000011c $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:400    .text.lcd_putstring:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:406    .text.lcd_putstring:0000000000000000 lcd_putstring
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:457    .text.lcd_command:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:463    .text.lcd_command:0000000000000000 lcd_command
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:713    .text.lcd_command:0000000000000124 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:720    .text.init_LCD:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:726    .text.init_LCD:0000000000000000 init_LCD
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:819    .text.init_LCD:0000000000000070 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:827    .text.init_GPIOA:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:833    .text.init_GPIOA:0000000000000000 init_GPIOA
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:885    .text.init_GPIOA:0000000000000034 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:890    .text.init_GPIOB:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:896    .text.init_GPIOB:0000000000000000 init_GPIOB
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:979    .text.init_GPIOB:0000000000000058 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:986    .text.init_ADC:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:992    .text.init_ADC:0000000000000000 init_ADC
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1061   .text.init_ADC:0000000000000040 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1070   .text.adcLCDdisplay:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1076   .text.adcLCDdisplay:0000000000000000 adcLCDdisplay
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1217   .text.init_TIM14:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1223   .text.init_TIM14:0000000000000000 init_TIM14
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1285   .text.init_TIM14:0000000000000030 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1293   .text.TIM14_IRQHandler:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1299   .text.TIM14_IRQHandler:0000000000000000 TIM14_IRQHandler
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1365   .text.TIM14_IRQHandler:0000000000000044 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1372   .text.leftLED:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1378   .text.leftLED:0000000000000000 leftLED
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1427   .text.leftLED:000000000000002c $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1999   .bss.ADC_value_left:0000000000000000 ADC_value_left
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1953   .data.sideThreshold:0000000000000000 sideThreshold
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1434   .text.frontLED:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1440   .text.frontLED:0000000000000000 frontLED
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1519   .text.frontLED:0000000000000050 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1992   .bss.ADC_value_front:0000000000000000 ADC_value_front
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1960   .data.frontThreshold:0000000000000000 frontThreshold
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1978   .data.holdOnFront:0000000000000000 holdOnFront
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1528   .text.rightLED:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1534   .text.rightLED:0000000000000000 rightLED
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1583   .text.rightLED:000000000000002c $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1985   .bss.ADC_value_right:0000000000000000 ADC_value_right
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1590   .text.main:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1596   .text.main:0000000000000000 main
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1934   .text.main:000000000000017c $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1966   .data.displayADC:0000000000000000 displayADC
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1972   .data.steadyLED:0000000000000000 steadyLED
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1950   .data.sideThreshold:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1957   .data.frontThreshold:0000000000000000 $d
ARM GAS  C:\Users\User\AppData\Local\Temp\ccmJFZdk.s 			page 64


C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1982   .bss.ADC_value_right:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1989   .bss.ADC_value_front:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccmJFZdk.s:1996   .bss.ADC_value_left:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
__aeabi_idiv
